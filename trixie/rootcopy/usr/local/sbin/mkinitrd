#!/bin/bash

# mkinitrd script
# Author: Tomas M <http://www.linux-live.org/>
# https://github.com/Tomas-M/linux-live/blob/master/initramfs/initramfs_create

# Modified for Porteus Initrd and DebianDog by fredx181

# Modified by gumanzoy https://github.com/PocketHandyBox

# Not running from terminal ?
tty -s;
if [ $? -ne 0 ]; then
	msg=" Please run this script from terminal"
	xmessage "`echo -e $msg`"
	exit 0
fi

if [ "`whoami`" != "root" ]; then
echo "This script should be run as root"
echo "Please run again, e.g. 'sudo mkinitrd', exiting now..."
sleep 3
exit
fi

echo "Create porteus-boot initrd1.xz"
if [ -z "$1" ]; then
echo "Kernels found in /lib/modules:"

ls /lib/modules
read -p "Type kernel version : " kernel
else
kernel=$1
fi

LMK="lib/modules/$kernel"
INITRAMFS=/tmp/initramfs-$$

mkdir -p $INITRAMFS/{bin,dev,etc/udhcpc,lib,lib/modules,m,mnt}
mkdir -p $INITRAMFS/memory/{changes,copy2ram,images}
mkdir -p $INITRAMFS/{proc,run,sys,tmp,union,usr,var/log}
#ln -s bin $INITRAMFS/sbin
cp -a `which busybox` $INITRAMFS/bin
cp -a /etc/udhcpc/default.script $INITRAMFS/etc/udhcpc/
cp -ra /opt/initramfs/* $INITRAMFS
ln -s linuxrc $INITRAMFS/init

busybox --list | grep -v init | grep -v linuxrc | while read TOOL; do
[ -e $INITRAMFS/bin/$TOOL ] || ln -s busybox $INITRAMFS/bin/$TOOL
done

mknod $INITRAMFS/dev/console c 5 1
mknod $INITRAMFS/dev/null c 1 3
mknod $INITRAMFS/dev/ram0 b 1 0
mknod $INITRAMFS/dev/tty1 c 4 1
mknod $INITRAMFS/dev/tty2 c 4 2
mknod $INITRAMFS/dev/tty3 c 4 3
mknod $INITRAMFS/dev/tty4 c 4 4

if [ "`uname -m`" = "x86_64" ] && [ -n "`ls /usr/share/nvidia/nvidia*.ids 2> /dev/null`" ]; then
NVIDIR=usr/share/nvidia
echo "$kernel" | grep -q '^5.10' && K510=yes
echo -n "copy nvidia.ids"
mkdir -p $INITRAMFS/$NVIDIR
[ "$K510" ] || cp /$NVIDIR/nvidia.ids $INITRAMFS/$NVIDIR/
[ -f /$NVIDIR/nvidia-tesla-470.ids ] && cp /$NVIDIR/nvidia-tesla-470.ids $INITRAMFS/$NVIDIR/
[ -f /$NVIDIR/nvidia-legacy-390xx.ids ] && cp /$NVIDIR/nvidia-legacy-390xx.ids $INITRAMFS/$NVIDIR/
[ "$K510" ] && cp /$NVIDIR/nvidia-legacy-340xx.ids $INITRAMFS/$NVIDIR/
echo " - done"
fi

# copy file to initramfs tree, including
# all library dependencies (as shown by ldd)
# $1 = file to copy (full path)
copy_including_deps()
{
   # if source doesn't exist or target exists, do nothing
   if [ ! -e "$1" -o -e "$INITRAMFS"/"$1" ]; then
      return
   fi

   cp -R --parents "$1" "$INITRAMFS"
   if [ -L "$1" ]; then
      DIR="$(dirname "$1")"
      LNK="$(readlink "$1")"
      copy_including_deps "$(cd "$DIR"; realpath -s "$LNK")"
   fi

   ldd "$1" 2>/dev/null | sed -r "s/.*=>|[(].*//g" | sed -r "s/^\\s+|\\s+\$//" \
     | while read LIB; do
        copy_including_deps "$LIB"
     done

   for MOD in $(find "$1" -type f | grep .ko); do
      for DEP in $(cat /$LMK/modules.dep | fgrep /$(basename $MOD):); do
         copy_including_deps "/$LMK/$DEP"
      done
   done

   shift
   if [ "$1" != "" ]; then
       copy_including_deps "$@"
   fi
}

#copy_including_deps /$LMK/kernel/fs/aufs
copy_including_deps /$LMK/kernel/fs/overlayfs
copy_including_deps /$LMK/kernel/fs/exfat
copy_including_deps /$LMK/kernel/fs/ext4
copy_including_deps /$LMK/kernel/fs/fat
#copy_including_deps /$LMK/kernel/fs/nls
copy_including_deps /$LMK/kernel/fs/nls/nls_ascii.*
copy_including_deps /$LMK/kernel/fs/nls/nls_cp437.*
copy_including_deps /$LMK/kernel/fs/nls/nls_iso8859-1.*
copy_including_deps /$LMK/kernel/fs/nls/nls_utf8.*
copy_including_deps /$LMK/kernel/fs/fuse
copy_including_deps /$LMK/kernel/fs/isofs
copy_including_deps /$LMK/kernel/fs/ntfs
copy_including_deps /$LMK/kernel/fs/ntfs3
copy_including_deps /$LMK/kernel/fs/squashfs
copy_including_deps /$LMK/kernel/fs/btrfs
copy_including_deps /$LMK/kernel/fs/xfs
#copy_including_deps /$LMK/kernel/crypto

# crc32c is needed for ext4, but I don't know which one, add them all, they are small
find /$LMK/kernel/ | grep crc32c | while read LINE; do
   copy_including_deps $LINE
done

copy_including_deps /$LMK/kernel/drivers/block/loop.*

# usb drivers
copy_including_deps /$LMK/kernel/drivers/usb/storage/usb-storage.*
copy_including_deps /$LMK/kernel/drivers/usb/storage/uas.*
copy_including_deps /$LMK/kernel/drivers/usb/host
copy_including_deps /$LMK/kernel/drivers/usb/common
copy_including_deps /$LMK/kernel/drivers/usb/core
copy_including_deps /$LMK/kernel/drivers/hid/usbhid
copy_including_deps /$LMK/kernel/drivers/hid/hid.*
copy_including_deps /$LMK/kernel/drivers/hid/hid-generic.*

# disk and cdrom drivers
copy_including_deps /$LMK/kernel/drivers/cdrom
copy_including_deps /$LMK/kernel/drivers/scsi/sr_mod.*
copy_including_deps /$LMK/kernel/drivers/scsi/sd_mod.*
copy_including_deps /$LMK/kernel/drivers/scsi/scsi_mod.*
copy_including_deps /$LMK/kernel/drivers/scsi/sg.*
#copy_including_deps /$LMK/kernel/drivers/ata
copy_including_deps /$LMK/kernel/drivers/ata/ahci.*
copy_including_deps /$LMK/kernel/drivers/ata/ata_*.*
copy_including_deps /$LMK/kernel/drivers/ata/sata_*.*
copy_including_deps /$LMK/kernel/drivers/nvme/host/nvme.*
copy_including_deps /$LMK/kernel/drivers/mmc
#copy_including_deps /$LMK/kernel/drivers/md/md-mod.*
#copy_including_deps /$LMK/kernel/drivers/md/dm-crypt.*

copy_including_deps /$LMK/kernel/drivers/pci/controller/vmd.*

#copy_including_deps /$LMK/kernel/drivers/ata/pata_*.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_amd.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_atiixp.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_jmicron.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_marvell.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_mpiix.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_pcmcia.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_pata_sil680.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_pata_sis.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_pata_via.*

# network support drivers
#if [ "$NETWORK" = "true" ]; then
   # add all known ethernet drivers
   copy_including_deps /$LMK/kernel/drivers/net/phy/broadcom.*
   copy_including_deps /$LMK/kernel/drivers/net/phy/realtek.*
   copy_including_deps /$LMK/kernel/drivers/net/ethernet
   copy_including_deps /$LMK/kernel/fs/nfs
#fi

# Copy all from modlist in initramfs directory
#while IFS= read line; do
#copy_including_deps "/${LMK}$line"
#done <<< "$(cat initramfs/modulelist)"

# copy all custom-built modules
#copy_including_deps /$LMK/updates
copy_including_deps /$LMK/updates/dkms/ntfs3.*

copy_including_deps /$LMK/modules.*

find $INITRAMFS -name "*.ko.gz" -exec gunzip {} \;
find $INITRAMFS -name "*.ko.xz" -exec xz -d {} \;
find $INITRAMFS -name "*.ko.zst" -exec zstd -d {} \;

# trim modules.order file. Perhaps we could remove it entirely
MODULEORDER="$(cd "$INITRAMFS/$LMK/"; find -name "*.ko" | sed -r "s:^./::g" | tr "\n" "|" | sed -r "s:[.]:.:g")"
cat $INITRAMFS/$LMK/modules.order | sed -r "s/.ko.gz\$/.ko/" | grep -E "$MODULEORDER"/foo/bar > $INITRAMFS/$LMK/_
mv $INITRAMFS/$LMK/_ $INITRAMFS/$LMK/modules.order

depmod -b $INITRAMFS $kernel

mv -f $INITRAMFS/modlist $INITRAMFS/modlist.tmp 2> /dev/null

## Create modlist in $INITRAMFS (then modprobe only existing modules at boot, faster)
rm $INITRAMFS/modlist 2> /dev/null
for m in $(cat $INITRAMFS/modlist.tmp 2> /dev/null); do
modprobe -S $kernel -d $INITRAMFS -Dq $m | grep -v builtin > /dev/null 2> /dev/null
[ $? -eq 0 ] && echo -n "$m " >> $INITRAMFS/modlist
done
rm $INITRAMFS/modlist.tmp

echo "Creating initrd1.xz . . ."
cd $INITRAMFS
find . -print | cpio -o -H newc 2>/dev/null | xz -T0 -f --extreme --check=crc32 > /tmp/initrd1.xz

cd ..
rm -fr $INITRAMFS
read -s -t 10 -n 1 -p "Press any key to close/continue, or wait 10 seconds . . ."
echo ""
exit
