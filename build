#!/bin/bash

#####################################################################################
# build 01-filesystem.squashfs for Debian Bookworm (Debian 12)
#####################################################################################

# 2024-12-20, fredx181, modified for xfce-gumanzoy as a concept

#####################################################################################

# Modified by gumanzoy <gumanzoy@gmail.com>
# https://gumanzoy.blogspot.com/2023/05/eng-liveusb-doglinux-debian-12-bookworm.html
# https://forum.puppylinux.com/viewtopic.php?p=88473

export LD_LIBRARY_PATH=

if [ "`whoami`" != "root" ]; then
echo "This script should be run as root"
sleep 3
exit
fi

# This makes sure when the script is interrupted, that all mount 'binds' will unmount 
exitfn () {
    trap SIGINT              # Resore signal handling for SIGINT
echo -e "\e[0;36mUnmounting mount binds in chroot\033[0m"
#umount -l chroot/tmp
umount -l $LAUNCHDIR/bookworm/chroot/proc 2> /dev/null
umount -l $LAUNCHDIR/bookworm/chroot/sys 2> /dev/null
umount -l $LAUNCHDIR/bookworm/chroot/dev/pts 2> /dev/null
umount -l $LAUNCHDIR/bookworm/chroot/dev 2> /dev/null

[ ! -d $LAUNCHDIR/bookworm/apt ] && mv -f $LAUNCHDIR/bookworm/chroot/var/cache/apt $LAUNCHDIR/bookworm/
rm -f $LAUNCHDIR/bookworm/apt/archives/lock 2> /dev/null
   sleep 2
   if mountpoint -q $LAUNCHDIR/bookworm/chroot/dev; then     # just in case check dev
   echo -e "\e[0;31mSomething went wrong, directory chroot cannot be removed\033[0m"
   echo -e "\e[0;31mMake sure it's not in use by some process and try again, exiting...\033[0m"
   sleep 2
   exit
   else
   rm -rf $LAUNCHDIR/bookworm/chroot
   fi
exit
}
export -f exitfn

trap "exitfn" 1 2 3 15           # Set up SIGINT trap to call function 'exitfn'

# OK or FAILED
ok_or_failed () {
[ $? -eq 0 ] && echo -e "\e[0;32mOK\033[0m" || echo -e "\e[0;31mFAILED\033[0m"
}
export -f ok_or_failed

########################## End functions #####################################

############# Start #############

export LAUNCHDIR="$PWD"

# ● fredx181, set DE_CONFIG to Xfce4
# (just in case if not configured, not sure, as it should be configured also in the .conf, DE_CONFIG=...)
export DE_CONFIG=Xfce4

########### Options (configuration)  ###########

helptext="build 01-filesystem.squashfs for Debian Bookworm (Debian 12)\n
usage: $(basename $0) <config_file>\n
	-help show this help\n
	Example using custom config file: \n
	build mycustom.conf \n"

params=$@
	
if [ ${#params} -eq 0 ]; then	# no options, so print info/help...
	echo -e $helptext
	exit
fi

arg=$1
		case $arg in
		-help|--help)
echo -e $helptext
exit
			;;
		*.conf) # ● fredx181, first arg needs to have .conf extension
config=$1
	. $config
	CONFIG="yes"
			;;

		*)
echo -e "\e[0;31mNot a valid option\033[0m"
echo -e $helptext
exit
			;;
		esac

# export final variables defined from custom .conf file
export BASE_INSTALL="$BASE_INSTALL"
export BASE_DOG_APPS_INSTALL="$BASE_DOG_APPS_INSTALL"
export BASE_APPS_INSTALL="$BASE_APPS_INSTALL"
export DESK_APPS_INSTALL="$DESK_APPS_INSTALL"
export EXTRA_DOG_APPS_INSTALL="$EXTRA_DOG_APPS_INSTALL"
export REM_AUTO_INST="$REM_AUTO_INST"
export FORCE32="$FORCE32"
export KEEPLOCALES="$KEEPLOCALES"
export SYSTEMD="$SYSTEMD"

if [ "$(uname -m)" = "i686" ]; then
echo
echo -e "\e[0;32mOK, running 32-bit OS, building live system for 32-bit: $(uname -m)\033[0m"
export ARCH="i386"
export FORCE32="TRUE"
elif [ "$(uname -m)" = "x86_64" ]; then
echo
	if [ "$FORCE32" = "TRUE" ]; then
	echo -e "\e[0;32mOK, running 64-bit OS, building live system for 32-bit: i686\033[0m"
	export ARCH="i386"
	else
	echo -e "\e[0;32mOK, running 64-bit OS, building live system for 64-bit: $(uname -m)\033[0m"
	export ARCH="amd64"
	fi
fi
echo -e "\e[0;33mCreate a Debian Bookworm minimal live system similar to 'DebianDog'\nWith overlay support and porteus-boot style included\n\nIt's required to have at least 3 GB free space\nand to run this script on a Linux filesystem, e.g. ext4\033[0m"
echo -e "\e[0;32mBuilding will be done in: $PWD/bookworm\033[0m"
if [ "$CONFIG" = "yes" ]; then
	if [ -z "$BASE_INSTALL" ]; then
	echo -e "\e[0;31mThis config file cannot be used, sorry, exiting...\033[0m"
	exit
	else
echo -e "\e[0;36mRunning with configuration: \e[1;29m$(readlink -f $config)\e[0;29m\033[0m"
	fi
else
echo -e "\e[0;36mNo custom config in use\033[0m"
echo -e "\e[0;36mUsing standard configuration defined on top of script\033[0m"
fi
echo -e "\e[0;32mIf you'd like a log from the output, run again e.g:\033[0m"
echo -e "\e[0;33m$0 -gui 2>&1 | tee build.log\033[0m"
echo -e "\e[0;36mFirst setting up debootstrap, this will take a few minutes\nAfter that you will be asked to set the password for 'root'\033[0m"
echo

if [ -d "bookworm/chroot" ]; then 
echo -e "\e[0;33m Working directory 'bookworm' already exists \n To be able to continue, contents need to be removed first\n All files in bookworm will be deleted, except the apt cache in chroot\033[0m"
#read -p "Are you sure to delete contents of directory bookworm? (Enter=yes) (Y/n)?" choice
choice=y

case "$choice" in 
  y|Y|"")

echo -e "\e[0;36mUnmount mount binds and remove bookworm/chroot...\033[0m"
#umount -l chroot/tmp
umount -l bookworm/chroot/proc 2> /dev/null
umount -l bookworm/chroot/sys 2> /dev/null
umount -l bookworm/chroot/dev/pts 2> /dev/null
umount -l bookworm/chroot/dev 2> /dev/null

mv bookworm/chroot/var/cache/apt bookworm/ 2> /dev/null
   if mountpoint -q bookworm/chroot/dev; then      # just in case check dev
   echo -e "\e[0;31mSomething went wrong, directory bookworm/chroot cannot be removed\033[0m"
   echo -e "\e[0;31mMake sure it's not in use by some process and try again, exiting...\033[0m"
   sleep 2
   exit
   else
   rm -rf bookworm/chroot
   fi
mkdir -p bookworm/chroot/var/cache 2> /dev/null
mv bookworm/apt bookworm/chroot/var/cache/ 2> /dev/null
rm bookworm/*.conf 2> /dev/null
#find bookworm -mindepth 1 ! -wholename 'bookworm/chroot/*' -delete 2> /dev/null
echo -e "\e[0;32mOK, continue...\033[0m"
;;
  n|N)
echo "Exiting..."
sleep 3
exit 0
;;
*)
echo -e "\e[0;31mNot a valid choice, exiting....\033[0m"
sleep 3
exit 0
;;
esac
fi

sleep 3

if [ $(command -v apt-get 2>/dev/null) ];then
 echo -e "\e[0;36mUpdate the package lists...\033[0m"
 apt-get update
 echo -e "\e[0;36mInstall some required packages, e.g. xz-utils, wget, squashfs-tools, etc...\033[0m"
 apt-get install wget xz-utils squashfs-tools cpio -y
 ok_or_failed
fi

if [ -z `which debootstrap` ] || [ ! -e /usr/share/debootstrap/scripts/bookworm ]; then
	msg=" You don't have debootstrap installed.\nIt's a dependency of this program.\n Please install it."
	echo $msg
exit 0
fi

# ● fredx181, below probably not needed, commented out
#if [ -z $(which dpkg) ] || [ -L $(which dpkg) ]; then
#	msg=" You don't have the (full) package dpkg installed.\nIt's a dependency of this program.\n Please install it."
#	echo $msg
#exit 0
#fi

########## Set up debootstrap ##########
echo -e "\e[0;36mSetting up debootstrap in bookworm/chroot\033[0m"
echo -e "\e[0;36mThis may take a while...\033[0m"
mkdir -p bookworm/chroot && cp -a $config bookworm && cd bookworm &&
debootstrap --arch=$ARCH --variant=minbase --include=apt-transport-https,ca-certificates,initscripts,adduser bookworm chroot http://deb.debian.org/debian/
ret=$?
echo $ret
if [ $ret -ne 0 ]; then
echo -e "\e[0;31mFailed to install the base system\033[0m"
echo -e "\e[0;32mThis can happen sometimes, please try again, exiting now...\033[0m"
exit
fi

# Cleaning after debootstrap
rm -rf chroot/usr/share/doc/*/examples
find chroot/usr/share/doc -type f ! -name copyright -delete 2> /dev/null
rm -rf chroot/usr/share/info/*
rm -rf chroot/usr/share/locale/??
rm -rf chroot/usr/share/locale/??_*
rm -rf chroot/usr/share/locale/??@*
rm -rf chroot/usr/share/locale/???
rm -rf chroot/usr/share/man/??
rm -rf chroot/usr/share/man/??.*
rm -rf chroot/usr/share/man/*_*

# Remove debootstrap sources.list. Will use deb822 style /etc/apt/sources.list.d/debian.sources instead
rm chroot/etc/apt/sources.list

# Use rootcopy folder instead of dog-boot-bookworm-20221013.tar.gz

#echo -e "\e[0;36mDownload required archives containing scripts, initrd-skel, etc...\033[0m"
#sleep 2
#wget --no-check-certificate https://raw.githubusercontent.com/DebianDog/MakeLive/gh-pages/dog-boot-bookworm-20221013.tar.gz

#echo -e "\e[0;36mExtracting...\033[0m"
#tar -zxf dog-boot-bookworm-20221013.tar.gz

#echo -e "\e[0;36mCopy scripts, required for porteus-boot, to the chroot...\033[0m"
#cp -af dog-boot-bookworm-20221013/* chroot/

cp --preserve=mode,timestamps -rf rootcopy/* chroot/
ok_or_failed

# mount bind some required directories from host filesystem
mount --bind /proc chroot/proc
#mount --bind /tmp chroot/tmp
mount --bind /dev chroot/dev
mount --bind /sys chroot/sys
mount -t devpts devpts chroot/dev/pts
# provide a network connection in chroot
echo -en "`cat /etc/resolv.conf`" > chroot/etc/resolv.conf
#cp -a ../libudev0_175-7.3_i386.deb chroot/

#################################################
############ Start running in chroot ############
#################################################
chroot_in () {
# ● fredx181, perhaps remove below ? as apt-get assumed installed ? 
if [ -z $(which apt-get) ]; then
echo -e "\e[0;31mSorry, apt-get not found, cannot continue\033[0m"
echo -e "\e[0;36mExiting . . .\033[0m"
touch /exit_
sleep 3
exit
fi 

export HOME=/root
export LC_ALL=C

# Setup install without install recommends
echo "APT::Install-Recommends "false"; APT::Install-Suggests "false";" > /etc/apt/apt.conf
echo "Acquire::Check-Valid-Until "0";" >> /etc/apt/apt.conf

# custom repository for systemd or not
if [ "$SYSTEMD" = "FALSE" ]; then
BOOKW=book-worm  # without systemd
elif [ "$SYSTEMD" = "TRUE" ]; then
BOOKW=bookworm  # with systemd
fi

# Add DogLinux github repo
echo "deb [signed-by=/etc/apt/keyrings/doglinux.gpg] https://github.com/doglinux/$BOOKW/raw/master/$ARCH/ ./" > etc/apt/sources.list.d/doglinux.list

[ "$ARCH" = "amd64" ] && dpkg --add-architecture i386

apt-get update # required, repositories just added
[ $? -ne 0 ] && apt-get update # try again if failed

echo -e "\e[0;36mPlease set the password for 'root'\033[0m"
echo -e "\e[0;33mAlso now you may want to add to or edit files in bookworm/chroot\033[0m" 
#passwd root
if [ $? -ne 0 ]; then # try again if passwords not match
echo -e "\e[0;36mPlease try again, type password for root\033[0m"
#passwd root
fi
[ $? -ne 0 ] && echo -e "\e[0;31mWarning: password is not set\033[0m"; sleep 3

# create user puppy
echo -e "\e[0;36mAdd user 'puppy'...\033[0m"
adduser puppy --gecos ",,," --disabled-password 2> /dev/null
echo
echo -e "\e[0;36mPlease set the password for user 'puppy'\033[0m"
#passwd puppy
if [ $? -ne 0 ]; then # try again if passwords not match
echo -e "\e[0;36mPlease try again, type password for puppy\033[0m"
#passwd puppy
fi
[ $? -ne 0 ] && echo -e "\e[0;31mWarning: password is not set\033[0m"; sleep 3
echo
# add groups fuse and wheel
addgroup fuse
addgroup wheel
echo
usermod -a -G sudo,cdrom,disk,audio,video,plugdev,fuse,wheel puppy

# configure keyboard first
if [ "$SYSTEMD" = "FALSE" ]; then
echo -e "\e[0;36mInstall keyboard-configuration and more required packages\033[0m"
DEBIAN_FRONTEND=noninteractive apt-get install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" whiptail keyboard-configuration sysvinit-core elogind xz-utils cryptsetup cryptsetup-bin gnupg dirmngr apt-utils wget elogind libelogind0 libpam-elogind udev --yes
else
rm -f /etc/apt/preferences.d/00systemd
echo -e "\e[0;36mInstall keyboard-configuration and more required packages\033[0m"
DEBIAN_FRONTEND=noninteractive apt-get install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" whiptail keyboard-configuration initscripts xz-utils cryptsetup cryptsetup-bin gnupg dirmngr apt-utils wget systemd systemd-sysv libpam-systemd udev --yes
fi

# Merge all install variables into one
INSTALL="$BASE_INSTALL $BASE_APPS_INSTALL $DESK_APPS_INSTALL $BASE_DOG_APPS_INSTALL $EXTRA_DOG_APPS_INSTALL"

if [ "$SYSTEMD" = "TRUE" ]; then  # if running with systemd, exclude sysvinit-core
INSTALL="$(echo "$INSTALL" | sed "s|sysvinit-core||g")"
fi

# check gnome-mplayer version
if [ "$(echo "$INSTALL" | grep gnome-mplayer)" ]; then
G_MPLAYER=$(echo "$INSTALL" | tr ' ' '\n' | grep "gnome-mplayer")
[ "$ARCH" = "i386" ] && INSTALL="$(echo "$INSTALL" | sed "s/$G_MPLAYER/gnome-mplayer-1.0.7/g")"
[ "$ARCH" = "amd64" ] && INSTALL="$(echo "$INSTALL" | sed "s/$G_MPLAYER/gnome-mplayer-1.0.6/g")"
fi

# simulate install first to check for errors, if there are, exit
echo -e "\e[0;36mChecking packages . . .\033[0m"
sleep 3
apt-get install -s -y $INSTALL
ret=$?
if [ $ret -eq 100 ]; then
echo -e "\e[0;31mSorry, there are one or more errors, see above.\033[0m"
echo -e "\e[0;31mCould be a typo in a package name.\033[0m"
echo -e "\e[0;36mExiting . . .\033[0m"
touch /exit_
sleep 3
exit
else
echo -e "\e[0;32mAll packages checked OK, continue now to install some basic packages... \033[0m"
sleep 3
fi

# Install some basic packages (do not edit, essential!)
apt-get install dialog live-boot cryptsetup-initramfs menu dbus xserver-xorg-legacy --yes
# try again if failed
if [ $? -ne 0 ]; then
apt-get install live-boot cryptsetup-initramfs menu dbus xserver-xorg-legacy --yes
	if [ $? -ne 0 ]; then
	echo -e "\e[0;31mFAILED\033[0m"
	touch /exit_
	exit
	fi
fi

dbus-uuidgen > /var/lib/dbus/machine-id
echo "live" > /etc/hostname
echo "127.0.0.1	 localhost" > /etc/hosts
echo "127.0.1.1	 live" >> /etc/hosts
mkdir /live
mkdir -p /opt/bin

update-rc.d snapexit defaults

# ● fredx181, instead of below here it can be also: "cd /bin; ln -sf bash sh; cd /" 
# make /bin/sh symlink to bash instead of dash:
echo -e "\e[0;36mmake /bin/sh symlink to bash instead of default dash\033[0m"
echo "dash dash/sh boolean false" | debconf-set-selections
DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash


############ Start installing packages ############

####### Start installing packages, defined on GUI #######
echo -e "\e[0;36mInstall packages, as defined in configuration\033[0m"

sleep 3
# If one of the variables is empty, it will be skipped

### Do the real installing
DEBIAN_FRONTEND=noninteractive apt-get install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -y $INSTALL
# try again if failed
if [ $? -ne 0 ]; then
DEBIAN_FRONTEND=noninteractive apt-get install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -y $INSTALL
	if [ $? -ne 0 ]; then
	echo -e "\e[0;31mFAILED\033[0m"
	touch /exit_
	exit
	fi
fi

# in case udev installed, replace with eudev
if [ "$SYSTEMD" = "FALSE" ]; then
apt-get install -y eudev porteusbootscripts
else
apt-get install -y porteusbootscripts
fi

# ● fredx181, commented out installing kernel 
### install the kernel
#echo -e "\e[0;36mInstall the kernel, download and extract\033[0m"
#mkdir -p /tmp/tmpapt
#[ "$ARCH" = "i386" ] && apt-get -o dir::cache::archives="/tmp/tmpapt" install -d linux-image-686-pae -y
#[ "$ARCH" = "amd64" ] && apt-get -o dir::cache::archives="/tmp/tmpapt" install -d linux-image-amd64 -y

#L_IMG=$(ls -S /tmp/tmpapt | head -1)
#dpkg-deb -x /tmp/tmpapt/$L_IMG /tmp/tmpapt
#kernel=$(ls /tmp/tmpapt/lib/modules/)
#cp -a /tmp/tmpapt/lib/modules /lib/
#cp -a /tmp/tmpapt/boot/config-* /boot/
#depmod $kernel

############ End of installing packages ############

# ● fredx181, for with systemd, seems not working anymore, not sure
mkdir -p /etc/systemd/network 2> /dev/null   # might not exist
ln -s /dev/null /etc/systemd/network/99-default.link # traditional network interface names

##### Extra apt-get remove ###### ● fredx181, below not useful, I think 
# Remove cpp ? 
# Takes a lot of space due to (large) dependency libllvm3.9 package
#if [ "$REM_AUTO_INST" = "TRUE" ] || [ "$REM_AUTO_INST" = "" ]; then
#echo -e "\e[0;36mRemoving cpp, if installed . . .\033[0m"
#apt-get purge -y cpp
#fi

### Uninstall gnome-icon-theme ###### ● fredx181, below can be deleted, I think
GNOME_ICON=$(apt-cache rdepends --installed gnome-icon-theme | grep -v "gnome-icon-theme\|Reverse Depends" | grep -v "|")  # check for reverse dependencies, remove only if none
[ -z "$GNOME_ICON" ] && apt-get purge --yes gnome-icon-theme    # in case installed

# if "xserver-xorg-input-evdev" is installed:
# apt-get purge --yes  xserver-xorg-input-libinput # uncomment if lxinput doesn't work
apt-get --yes autoremove
#####################################

# ● fredx181, not sure anymore if this is needed for encrypted save
. /etc/cryptsetup-initramfs/conf-hook
if [ "$CRYPTSETUP" = "" ]; then
echo "CRYPTSETUP=y" >> /etc/cryptsetup-initramfs/conf-hook
fi
echo

apt-get install locales -y

echo "Cleaning..."
rm -f var/lib/alsa/asound.state
rm -f root/.bash_history
rm -f root/.xsession-errors
rm -rf root/.cache
rm -rf root/.thumbnails
rm -f etc/blkid-cache
rm -f var/lib/dhcp/dhclient.eth0.leases
rm -f var/lib/dhcpcd/*.lease
#rm -rf lib/consolefonts
#rm -rf lib/keymaps
rm -fr var/lib/aptitude/* 2> /dev/null
ls var/lib/apt/lists | grep -v "lock" | grep -v "partial" | xargs -i rm -r var/lib/apt/lists/{} ;
rm -f var/cache/debconf/*-old
rm -f var/lib/dpkg/*-old

rm -rf usr/share/doc/*/examples

rm -f etc/fonts/conf.d/10-hinting-slight.conf

rm -f usr/share/backgrounds/xfce/*.jpg
rm -f usr/share/backgrounds/xfce/*.png

# Remove mesa libs from 01-filesystem.squashfs
# Prefer to make module with mesa and libdrm from backports
if [ "$ARCH" = "amd64" ]; then
rm -f usr/lib/x86_64-linux-gnu/dri/*_dri.so
rm -f usr/lib/x86_64-linux-gnu/libdrm_*so.*
rm -f usr/lib/x86_64-linux-gnu/libEGL_mesa.so.0*
fi

# https://github.com/Tomas-M/linux-live/blob/master/Slax/debian12/cleanup

# Unzip gzipped files (man pages), so LZMA can compress 2times better.
# First we fix symlinks, then uncompress files
# $1 = search directory
uncompress_files()
{
   local LINK LINE

   find "$1" -type l -name "*.gz" | while read LINE; do
      LINK="$(readlink "$LINE" | sed -r 's/.gz$//')"
      FILE="$(echo "$LINE" | sed -r 's/.gz$//')"
      ln -sfn "$LINK" "$FILE"
      rm -f "$LINE"
   done
   find "$1" -type f -name "*.gz" | xargs -r gunzip -f
}

uncompress_files etc/alternatives
uncompress_files usr/share/man

# remove broken links
# $1 = search directory
remove_broken_links()
{
   find "$1" -type l -exec test ! -e {} \; -print | xargs rm -vf
}

remove_broken_links /etc/alternatives
remove_broken_links /usr/share/man

# Re-create man-db /var/cache/man/
mandb --create

rm -f /var/lib/dbus/machine-id
#apt-get clean
#rm -rf /tmp/*
rm /etc/resolv.conf
touch /etc/resolv.conf
}
export -f chroot_in

if [ "$(which chroot)" = "/bin/chroot" ]; then
CHROOT="/usr/sbin/chroot"
else
CHROOT="chroot"
fi

$CHROOT chroot /bin/bash -c chroot_in

# do not continue if there were errors
[ -f "chroot/exit_" ] && exitfn

################################################
############ End running in chroot #############
################################################

echo -e "\e[0;36mUnmounting mount binds in chroot\033[0m"
#umount -l chroot/tmp
umount -l chroot/proc
umount -l chroot/dev/pts
umount -l chroot/dev
umount -l chroot/sys

cd "$LAUNCHDIR/bookworm/"

rm -f 01-filesystem.squashfs 2> /dev/null # just in case it exists remove first

# copy config to chroot/root
mv $(basename $config) chroot/root/

# Copy /etc/skel/{.bashrc,.profile} to /root/
cp chroot/etc/skel/{.bashrc,.profile} chroot/root/

mkdir chroot/root/Desktop
mkdir chroot/home/puppy/Desktop

# Copy xfceconf/ to chroot/
cp --preserve=mode,timestamps -rf xfceconf/* chroot/

chown -R 1000:1000 chroot/home/puppy

rm -f chroot/var/cache/apt/*.bin
mkdir -p apt/archives
mv -f chroot/var/cache/apt/archives/*.deb ./apt/archives/

if [ "$(cat chroot/etc/X11/default-display-manager 2> /dev/null)" ]; then
echo -e "\e[0;36mIt looks like you have a display-manager installed\033[0m"
cat chroot/etc/X11/default-display-manager
echo -e "\e[0;36mThis probably will conflict with the default login method (through /etc/inittab)\033[0m"
cp -af chroot/etc/inittab-noauto chroot/etc/inittab

if [ "$SYSTEMD" = "TRUE" ]; then
rm -f chroot/etc/systemd/system/graphical.target.wants/getty@tty1.service
rm -f chroot/etc/systemd/system/getty.target.wants/getty@tty1.service
fi

echo -e "\e[0;32mDisabled autologin, using display-manager for login\033[0m"
sleep 3
fi

# Download extra squashfs modules if DE config is set
#echo -e "\e[0;36mIf configured, download and extract extra .squashfs modules to squash...\033[0m"
#mkdir squash
#[ "$DE_CONFIG" = "Xfce4" ] && wget --no-check-certificate -P squash -r -e robots=off -nd -l1 -A "*squashfs" https://debiandog.github.io/MakeLive/modules-bookworm/xfce4/ && unsquashfs -f -d chroot squash/*.squashfs; rm -rf squash 

#update-icon-caches chroot/usr/share/icons/hicolor/

echo -e "\e[0;33mNow we will create: filesystem: '01-filesystem.squashfs'"
mksquashfs chroot 01-filesystem.squashfs -comp xz -b 512k -Xbcj x86
ok_or_failed

# Move back the cache to chroot
mv -f ./apt/archives/*.deb chroot/var/cache/apt/archives/ 2> /dev/null
rm -rf apt 2> /dev/null

echo -e "\e[0;32mFinished! If all went well, the required files for a frugal install are in 'live' folder \n\nHave a good day!\033[0m"

exit 0

