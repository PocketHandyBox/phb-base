#!/bin/bash

#####################################################################################
# build 01-filesystem.squashfs for Debian Bookworm (Debian 12)
#####################################################################################

# 2024-12-20, fredx181, modified for xfce-gumanzoy as a concept

#####################################################################################

# Modified by gumanzoy <gumanzoy@gmail.com>
# https://github.com/PocketHandyBox/phb-base
# https://forum.puppylinux.com/viewtopic.php?t=13647

export LD_LIBRARY_PATH=

if [ "`whoami`" != "root" ]; then
	echo "This script should be run as root"
	exit
fi

# This makes sure when the script is interrupted, that all mount 'binds' will unmount 
exitfn () {
trap SIGINT              # Resore signal handling for SIGINT
echo -e "\e[0;36mUnmounting mount binds in chroot\033[0m"
#umount -l chroot/tmp
umount -l $LAUNCHDIR/bookworm/chroot/proc 2> /dev/null
umount -l $LAUNCHDIR/bookworm/chroot/sys 2> /dev/null
umount -l $LAUNCHDIR/bookworm/chroot/dev/pts 2> /dev/null
umount -l $LAUNCHDIR/bookworm/chroot/dev 2> /dev/null

# Don't remove bookworm/chroot in case of error
#[ ! -d $LAUNCHDIR/bookworm/apt ] && mv -f $LAUNCHDIR/bookworm/chroot/var/cache/apt $LAUNCHDIR/bookworm/
rm -f $LAUNCHDIR/bookworm/apt/archives/lock 2> /dev/null

if mountpoint -q $LAUNCHDIR/bookworm/chroot/dev; then     # just in case check dev
	echo -e "\e[0;31mSomething went wrong, directory chroot cannot be removed\033[0m"
	echo -e "\e[0;31mMake sure it's not in use by some process and try again, exiting...\033[0m"
	exit
else
# Don't remove bookworm/chroot in case of error
#	rm -rf $LAUNCHDIR/bookworm/chroot
	rm -f $LAUNCHDIR/bookworm/*.conf 2> /dev/null
fi
exit
}
export -f exitfn

trap "exitfn" 1 2 3 15           # Set up SIGINT trap to call function 'exitfn'

# OK or FAILED
ok_or_failed () {
[ $? -eq 0 ] && echo -e "\e[0;32mOK\033[0m" || echo -e "\e[0;31mFAILED\033[0m"
}
export -f ok_or_failed

########################## End functions #####################################

############# Start #############

export LAUNCHDIR="$PWD"

########### Options (configuration)  ###########

if [ -f "$1" ]; then
	config="$1"
	. "$config"
else exit
fi

if [ -z "$PL_BASE" ] || [ -z "$INSTALL" ]; then
	echo -e "\e[0;31mThis config file cannot be used, sorry, exiting...\033[0m"
	exit
else
	echo -e "\e[0;36mRunning with configuration: \e[1;29m$(readlink -f $config)\e[0;29m\033[0m"
fi

# export final variables defined from custom .conf file
export SYSTEMD="$SYSTEMD"
export BUILD686="$BUILD686"
export PL_BASE="$PL_BASE"
export PL_SYSV="$PL_SYSV"
export PL_SYSTEMD="$PL_SYSTEMD"
export INSTALL="$INSTALL"
export PL_AMD64="$PL_AMD64"

if [ -n "$TEMPMIRROR" ]; then
	MIRRORURL="http://""$TEMPMIRROR""/debian/"
else
	MIRRORURL="http://deb.debian.org/debian/"
fi

if [ "$(uname -m)" = "i686" ]; then
	echo -e "\e[0;32mOK, running 32-bit OS, building live system for 32-bit: $(uname -m)\033[0m"
	export ARCH="i386"
elif [ "$(uname -m)" = "x86_64" ]; then
	if [ "$BUILD686" = "TRUE" ]; then
		echo -e "\e[0;32mOK, running 64-bit OS, building live system for 32-bit: i686\033[0m"
		export ARCH="i386"
	else
		echo -e "\e[0;32mOK, running 64-bit OS, building live system for 64-bit: $(uname -m)\033[0m"
		export ARCH="amd64"
	fi
fi

echo -e "\e[0;33mBuild Debian Bookworm (Debian 12) base filesystem '01-filesystem.squashfs' for 'PocketHandyBox'\nWith overlay support and porteus-boot style included\n\nIt's required to have at least 3 GB free space\nand to run this script on a Linux filesystem, e.g. ext4\033[0m"
echo -e "\e[0;32mBuilding will be done in: $PWD/bookworm\033[0m"

#echo -e "\e[0;32mIf you'd like a log from the output, run again e.g:\033[0m"
#echo -e "\e[0;33m$0 -gui 2>&1 | tee build.log\033[0m"
echo -e "\e[0;36mFirst setting up debootstrap, this will take a few minutes\033[0m"

if [ -d "bookworm/chroot" ]; then 
	echo -e "\e[0;33m Working directory 'bookworm' already exists\n All files in bookworm will be deleted, except the apt cache in chroot\033[0m"
	echo -e "\e[0;36mUnmount mount binds and remove bookworm/chroot...\033[0m"
	#umount -l chroot/tmp
	umount -l bookworm/chroot/proc 2> /dev/null
	umount -l bookworm/chroot/sys 2> /dev/null
	umount -l bookworm/chroot/dev/pts 2> /dev/null
	umount -l bookworm/chroot/dev 2> /dev/null

	mv bookworm/chroot/var/cache/apt bookworm/ 2> /dev/null
	if mountpoint -q bookworm/chroot/dev; then      # just in case check dev
		echo -e "\e[0;31mSomething went wrong, directory bookworm/chroot cannot be removed\033[0m"
		echo -e "\e[0;31mMake sure it's not in use by some process and try again, exiting...\033[0m"
		exit
	else
		rm -rf bookworm/chroot
	fi
	mkdir -p bookworm/chroot/var/cache 2> /dev/null
	mv bookworm/apt bookworm/chroot/var/cache/ 2> /dev/null
	rm -f bookworm/*.conf 2> /dev/null
	#find bookworm -mindepth 1 ! -wholename 'bookworm/chroot/*' -delete 2> /dev/null
	echo -e "\e[0;32mOK, continue...\033[0m"
fi

if [ $(command -v apt-get 2>/dev/null) ];then
	echo -e "\e[0;36mUpdate the package lists...\033[0m"
	apt-get update
	echo -e "\e[0;36mInstall some required packages, e.g. xz-utils, wget, squashfs-tools, etc...\033[0m"
	apt-get install debootstrap squashfs-tools wget xz-utils zstd -y
	ok_or_failed
fi

if [ -z `which debootstrap` ] || [ ! -e /usr/share/debootstrap/scripts/bookworm ]; then
	msg=" You don't have debootstrap installed.\nIt's a dependency of this program.\n Please install it."
	echo $msg
exit 0
fi

########## Set up debootstrap ##########
echo -e "\e[0;36mSetting up debootstrap in bookworm/chroot\033[0m"
echo -e "\e[0;36mThis may take a while...\033[0m"
mkdir -p bookworm/chroot && cp -a $config bookworm && cd bookworm &&
debootstrap --arch=$ARCH --variant=minbase --include=apt-transport-https,ca-certificates,initscripts,adduser bookworm chroot "$MIRRORURL"
ret=$?
echo $ret
if [ $ret -ne 0 ]; then
	echo -e "\e[0;31mFailed to install the base system\033[0m"
	echo -e "\e[0;32mThis can happen sometimes, please try again, exiting now...\033[0m"
	exit
fi

# Cleaning after debootstrap
rm -rf chroot/usr/share/doc/*/examples
find chroot/usr/share/doc -type f ! -name copyright -delete 2> /dev/null
rm -rf chroot/usr/share/info/*
rm -rf chroot/usr/share/locale/??
rm -rf chroot/usr/share/locale/??_*
rm -rf chroot/usr/share/locale/??@*
rm -rf chroot/usr/share/locale/???
rm -rf chroot/usr/share/man/??
rm -rf chroot/usr/share/man/??.*
rm -rf chroot/usr/share/man/*_*

# Remove debootstrap sources.list. Will use deb822 style /etc/apt/sources.list.d/debian.sources instead
rm chroot/etc/apt/sources.list

cp --preserve=mode,timestamps -rf rootcopy/* chroot/
ok_or_failed

mkdir chroot/xfceconf
cp --preserve=mode,timestamps -rf xfceconf/* chroot/xfceconf/
ok_or_failed

if [ -n "$TEMPMIRROR" ]; then
	sed -i s/deb.debian.org/"$TEMPMIRROR"/ chroot/etc/apt/sources.list.d/debian.sources
fi

# mount bind some required directories from host filesystem
mount --bind /proc chroot/proc
#mount --bind /tmp chroot/tmp
mount --bind /dev chroot/dev
mount --bind /sys chroot/sys
mount -t devpts devpts chroot/dev/pts
# provide a network connection in chroot
echo -en "`cat /etc/resolv.conf`" > chroot/etc/resolv.conf

#################################################
############ Start running in chroot ############
#################################################
chroot_in () {

export HOME=/root
export LC_ALL=C

# Setup install without install recommends
echo "APT::Install-Recommends "false"; APT::Install-Suggests "false";" > /etc/apt/apt.conf
echo "Acquire::Check-Valid-Until "0";" >> /etc/apt/apt.conf

if [ "$SYSTEMD" = "FALSE" ]; then
	PL_SYS=$PL_SYSV
elif [ "$SYSTEMD" = "TRUE" ]; then
	rm -f /etc/apt/preferences.d/00systemd /etc/apt/sources.list.d/devuan.sources /usr/share/keyrings/devuan-archive-keyring.gpg
	PL_SYS=$PL_SYSTEMD
fi

# Add DogLinux github repo
echo "deb [signed-by=/etc/apt/keyrings/doglinux.gpg] https://github.com/doglinux/bookworm/raw/master/$ARCH/ ./" > etc/apt/sources.list.d/doglinux.list

[ "$ARCH" = "amd64" ] && dpkg --add-architecture i386

apt-get update # required, repositories just added
[ $? -ne 0 ] && apt-get update # try again if failed

echo -e "\e[0;36mPlease set the password for 'root'\033[0m"
echo -e "\e[0;33mAlso now you may want to add to or edit files in bookworm/chroot\033[0m" 
#passwd root
if [ $? -ne 0 ]; then # try again if passwords not match
	echo -e "\e[0;36mPlease try again, type password for root\033[0m"
	#passwd root
fi
[ $? -ne 0 ] && echo -e "\e[0;31mWarning: password is not set\033[0m"; sleep 3

# create user puppy
echo -e "\e[0;36mAdd user 'puppy'...\033[0m"
adduser puppy --gecos ",,," --disabled-password 2> /dev/null
echo
echo -e "\e[0;36mPlease set the password for user 'puppy'\033[0m"
#passwd puppy
if [ $? -ne 0 ]; then # try again if passwords not match
	echo -e "\e[0;36mPlease try again, type password for puppy\033[0m"
	#passwd puppy
fi
[ $? -ne 0 ] && echo -e "\e[0;31mWarning: password is not set\033[0m"; sleep 3
echo
# add groups fuse and wheel
#addgroup fuse
#addgroup wheel
echo
#usermod -a -G sudo,cdrom,disk,audio,video,plugdev,fuse,wheel puppy
usermod -a -G sudo,cdrom,disk,audio,video,plugdev puppy

echo -e "\e[0;36mInstall sysvinit/systemd required packages\033[0m"
DEBIAN_FRONTEND=noninteractive apt-get install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -y $PL_SYS
# try again if failed
if [ $? -ne 0 ]; then
DEBIAN_FRONTEND=noninteractive apt-get install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -y $PL_SYS
	if [ $? -ne 0 ]; then
	echo -e "\e[0;31mFAILED\033[0m"
	touch /exit_
	exit
	fi
fi

# Run 'apt-get upgrade' to force update packages from security.debian.org
DEBIAN_FRONTEND=noninteractive apt-get upgrade -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -y

# Install some basic packages (do not edit, essential!)
DEBIAN_FRONTEND=noninteractive apt-get install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -y $PL_BASE
# try again if failed
if [ $? -ne 0 ]; then
DEBIAN_FRONTEND=noninteractive apt-get install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -y $PL_BASE
	if [ $? -ne 0 ]; then
	echo -e "\e[0;31mFAILED\033[0m"
	touch /exit_
	exit
	fi
fi

dbus-uuidgen > /var/lib/dbus/machine-id
echo "live" > /etc/hostname
echo "127.0.0.1	 localhost" > /etc/hosts
echo "127.0.1.1	 live" >> /etc/hosts
mkdir /live
mkdir -p /opt/bin

# Disable because included into porteusbootscripts deb postinst
#update-rc.d snapexit defaults

update-rc.d sfsunload defaults

# Merge all install variables into one
[ "$ARCH" = "amd64" ] && INSTALL="$INSTALL $PL_AMD64"

# simulate install first to check for errors, if there are, exit
echo -e "\e[0;36mChecking packages . . .\033[0m"
apt-get install -s -y $INSTALL
ret=$?
if [ $ret -eq 100 ]; then
	echo -e "\e[0;31mSorry, there are one or more errors, see above.\033[0m"
	echo -e "\e[0;31mCould be a typo in a package name.\033[0m"
	echo -e "\e[0;36mExiting . . .\033[0m"
	touch /exit_
	exit
else
	echo -e "\e[0;32mAll packages checked OK, continue now to install some basic packages... \033[0m"
fi

############ Start installing packages ############

####### Start installing packages, as defined in configuration #######
echo -e "\e[0;36mInstall packages, as defined in configuration\033[0m"

### Do the real installing
DEBIAN_FRONTEND=noninteractive apt-get install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -y $INSTALL
# try again if failed
if [ $? -ne 0 ]; then
DEBIAN_FRONTEND=noninteractive apt-get install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -y $INSTALL
	if [ $? -ne 0 ]; then
	echo -e "\e[0;31mFAILED\033[0m"
	touch /exit_
	exit
	fi
fi

# ● fredx181, commented out installing kernel 
### install the kernel
#echo -e "\e[0;36mInstall the kernel, download and extract\033[0m"
#mkdir -p /tmp/tmpapt
#[ "$ARCH" = "i386" ] && apt-get -o dir::cache::archives="/tmp/tmpapt" install -d linux-image-686-pae -y
#[ "$ARCH" = "amd64" ] && apt-get -o dir::cache::archives="/tmp/tmpapt" install -d linux-image-amd64 -y

#L_IMG=$(ls -S /tmp/tmpapt | head -1)
#dpkg-deb -x /tmp/tmpapt/$L_IMG /tmp/tmpapt
#kernel=$(ls /tmp/tmpapt/lib/modules/)
#cp -a /tmp/tmpapt/lib/modules /lib/
#cp -a /tmp/tmpapt/boot/config-* /boot/
#depmod $kernel

############ End of installing packages ############

# ● fredx181, for with systemd, seems not working anymore, not sure
mkdir -p /etc/systemd/network 2> /dev/null   # might not exist
ln -s /dev/null /etc/systemd/network/99-default.link # traditional network interface names

### Uninstall gnome-icon-theme ######
GNOME_ICON=$(apt-cache rdepends --installed gnome-icon-theme | grep -v "gnome-icon-theme\|Reverse Depends" | grep -v "|")  # check for reverse dependencies, remove only if none
[ -z "$GNOME_ICON" ] && apt-get purge --yes gnome-icon-theme    # in case installed

# if "xserver-xorg-input-evdev" is installed:
# apt-get purge --yes  xserver-xorg-input-libinput # uncomment if lxinput doesn't work
apt-get --yes autoremove
#####################################

# Use functions uncompress_files and remove_broken_links from linux-live
# https://github.com/Tomas-M/linux-live/blob/master/Slax/debian12/cleanup

# Unzip gzipped files (man pages), so LZMA can compress 2times better.
# First we fix symlinks, then uncompress files
# $1 = search directory
uncompress_files() {
local LINK LINE

find "$1" -type l -name "*.gz" | while read LINE; do
	LINK="$(readlink "$LINE" | sed -r 's/.gz$//')"
	FILE="$(echo "$LINE" | sed -r 's/.gz$//')"
	ln -sfn "$LINK" "$FILE"
	rm -f "$LINE"
done
find "$1" -type f -name "*.gz" | xargs -r gunzip -f
}

uncompress_files etc/alternatives
uncompress_files usr/share/man

# remove broken links
# $1 = search directory
remove_broken_links() {
find "$1" -xtype l -delete 2> /dev/null
}

remove_broken_links etc/alternatives
remove_broken_links usr/share/man

# Re-create man-db /var/cache/man/
mandb --create

# Create symlink for /usr/local/sbin/mount.ntfs
ln -sf /usr/local/sbin/mount.ntfs /usr/sbin/mount.ntfs

# Enable pin priority 99 to ntfs-3g package to disable auto updating
sed -i s/ntfs3g/ntfs-3g/ etc/apt/preferences.d/noupgrades

# Copy xfceconf/ to /
cp --preserve=mode,timestamps -rf xfceconf/* ./
rm -rf xfceconf

mkdir -p root/{Desktop,.config} home/puppy/{Desktop,.config}

# After replacing org.gtk.Settings.FileChooser.gschema.xml with modified version
# Need update /usr/share/glib-2.0/schemas/gschemas.compiled file
if [ "$ARCH" = "amd64" ]; then
/usr/lib/x86_64-linux-gnu/glib-2.0/glib-compile-schemas /usr/share/glib-2.0/schemas/
elif [ "$ARCH" = "i386" ]; then
/usr/lib/i386-linux-gnu/glib-2.0/glib-compile-schemas /usr/share/glib-2.0/schemas/
fi

# Copy /etc/skel/.config to /root/ and /home/puppy/
cp --preserve=mode,timestamps -rf etc/skel/.config/{gtk-2.0,gtk-3.0,netsurf,volumeicon,xfce4,mimeapps.list} root/.config/
cp --preserve=mode,timestamps -rf etc/skel/.config/{gtk-2.0,gtk-3.0,netsurf,volumeicon,xfce4,mimeapps.list} home/puppy/.config/

# Create symlinks for devices icons
for SIZE in 16x16 22x22 24x24 32x32 48x48; do
	cp -df usr/share/icons/devices/* usr/share/icons/AdwaitaLegacy/$SIZE/devices/ 2> /dev/null
done
rm -rf usr/share/icons/devices

# Create symlink for icon harddrive.png
#for SIZE in 16x16 22x22 24x24 32x32 48x48 64x64; do
#	mkdir -p usr/share/icons/Adwaita/$SIZE/devices 2> /dev/null
#	cp -df usr/share/icons/harddrive.png usr/share/icons/Adwaita/$SIZE/devices
#done
#rm -f usr/share/icons/harddrive.png

# Create symlink for Thunar panel icon view-dual.svg
#for SIZE in 22 24 32; do
#	mkdir -p usr/share/icons/Numix/$SIZE/actions 2> /dev/null
#	cp -df usr/share/icons/view-dual.svg usr/share/icons/Numix/$SIZE/actions
#done
#rm -f usr/share/icons/view-dual.svg

remove_broken_links usr/share/icons/Adwaita
remove_broken_links usr/share/icons/AdwaitaLegacy
remove_broken_links usr/share/icons/Numix
remove_broken_links usr/share/icons/Numix-Light

# Remove empty dir's
rmdir usr/share/icons/Adwaita/*/* 2> /dev/null
rmdir usr/share/icons/Adwaita/* 2> /dev/null
rmdir usr/share/icons/AdwaitaLegacy/*/* 2> /dev/null
rmdir usr/share/icons/Numix/*/* 2> /dev/null
rmdir usr/share/icons/Numix-Light/*/* 2> /dev/null
rmdir usr/share/icons/Numix-Light/* 2> /dev/null
remove_broken_links usr/share/icons/Numix-Light
rmdir usr/share/icons/Numix-Light 2> /dev/null

# Update /usr/share/icons/hicolor/index.theme
update-icon-caches usr/share/icons/*/

# Update /usr/share/applications/mimeinfo.cache
# It is need to do after change .desktop files
update-desktop-database

# Remove mesa libs from 01-filesystem.squashfs
# Prefer to make module with mesa and libdrm from backports
if [ "$ARCH" = "amd64" ]; then
rm -f usr/lib/x86_64-linux-gnu/dri/*_dri.so
rm -f usr/lib/x86_64-linux-gnu/libdrm_*so.*
rm -f usr/lib/x86_64-linux-gnu/libEGL_mesa.so.0*
fi

echo "Cleaning..."
rm -f var/cache/apt/*.bin
rm -f var/cache/debconf/*-old

find var/lib/apt/lists -type f ! -name lock -delete 2> /dev/null

rm -f var/lib/alsa/asound.state
rm -f var/lib/dhcp/*.leases
rm -f var/lib/dhcpcd/*.lease
rm -f var/lib/dpkg/*-old
rm -f var/log/apt/*
rm -f var/log/{alternatives.log,bootstrap.log,dpkg.log}

rm -rf usr/share/doc/*/examples

rm -f etc/fonts/conf.d/10-hinting-slight.conf

rm -f var/lib/dbus/machine-id
rm etc/resolv.conf
touch etc/resolv.conf
}
export -f chroot_in

if [ "$(which chroot)" = "/bin/chroot" ]; then
CHROOT="/usr/sbin/chroot"
else
CHROOT="chroot"
fi

$CHROOT chroot /bin/bash -c chroot_in

# do not continue if there were errors
[ -f "chroot/exit_" ] && exitfn

################################################
############ End running in chroot #############
################################################

echo -e "\e[0;36mUnmounting mount binds in chroot\033[0m"
#umount -l chroot/tmp
umount -l chroot/proc
umount -l chroot/dev/pts
umount -l chroot/dev
umount -l chroot/sys

cd "$LAUNCHDIR/bookworm/"

rm -f "$ARCH"/01-filesystem.squashfs 2> /dev/null # just in case it exists remove first

# copy config to chroot/root
mv $(basename $config) chroot/root/

# Copy /etc/skel/{.bashrc,.profile} to /root/
cp chroot/etc/skel/{.bashrc,.profile} chroot/root/

chown -R 1000:1000 chroot/home/puppy

if [ -n "$TEMPMIRROR" ]; then
	sed -i s/"$TEMPMIRROR"/deb.debian.org/ chroot/etc/apt/sources.list.d/debian.sources
fi

if [ "$(cat chroot/etc/X11/default-display-manager 2> /dev/null)" ]; then
	echo -e "\e[0;36mIt looks like you have a display-manager installed\033[0m"
	cat chroot/etc/X11/default-display-manager
	echo -e "\e[0;36mThis probably will conflict with the default login method (through /etc/inittab)\033[0m"
	cp -af chroot/etc/inittab-noauto chroot/etc/inittab
	if [ "$SYSTEMD" = "TRUE" ]; then
		rm -f chroot/etc/systemd/system/graphical.target.wants/getty@tty1.service
		rm -f chroot/etc/systemd/system/getty.target.wants/getty@tty1.service
	fi
	echo -e "\e[0;32mDisabled autologin, using display-manager for login\033[0m"
fi

mkdir -p apt/archives
mv -f chroot/var/cache/apt/archives/*.deb ./apt/archives/

mkdir -p "$ARCH" 2> /dev/null
echo -e "\e[0;33mNow we will create: filesystem: '01-filesystem.squashfs'"
mksquashfs chroot "$ARCH"/01-filesystem.squashfs -b 512k $MKSFSCMP
ok_or_failed

# Move back the cache to chroot
mv -f ./apt/archives/*.deb chroot/var/cache/apt/archives/ 2> /dev/null
rm -rf apt 2> /dev/null

echo -e "\e[0;32mFinished! If all went well, '01-filesystem.squashfs' file are in ""$ARCH"" folder \n\nHave a good day!\033[0m"

exit 0
