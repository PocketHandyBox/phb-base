#!/bin/sh
### linuxrc script by brokenman <http://www.porteus.org>
### modified for Debiandog by fredx181
# 2024-03-18 fredx181 modified for pseudo-full install

# Modified by gumanzoy https://github.com/PocketHandyBox

export PATH=/bin:/usr/bin:./

# Source functions
. ./finit

# Enable pivot_root in initramfs to let it behave like initrd:
if [ -d /m ]; then
    mount -nt tmpfs tmpfs -o mode=0755 /m
    cp -a ??* /m 2>/dev/null
    exec switch_root /m linuxrc "$@"
fi

mount -nt proc proc /proc
mount -nt sysfs sysfs /sys
echo 0 >/proc/sys/kernel/printk

echo "`cat /proc/cmdline|sed -e 's/^/ /'`" > /etc/cmdline
param() { egrep -qo " $1( |\$)" /etc/cmdline; }
value() { egrep -o " $1=[^ ]+" /etc/cmdline | cut -d= -f2; }
debug() { param debug && { echo -e "\n=====\n: Debugging started. Here is the shell for you.\n: Type your desired commands, hit Ctrl+D to continue booting\n: or press Ctrl+Alt+Del to reboot."; sh; echo -e "\n\n"; }; }

## Check for debug
if [ `grep -q debug /proc/cmdline` ]; then DBUG=0; fi

clear
echo -e "${BOLD}Starting init script.${RST}"

# Variables:
i=`echo "[1;33m""^ ""[0m"`
m=`echo "[1;33m""->""[0m"`
arch=`uname -m`; [ $arch = x86_64 ] || arch=i586
CFG=`value cfgfile`; [ $CFG ] || CFG=initrd1.xz
FROM=`value from`; ISO=`echo $FROM | egrep ".*\.iso( |\$)"`
IP=`value ip | cut -d: -f2`
NFSPATH=`value nfspath`; [ $NFSPATH ] || NFSPATH=/srv/pxe
MOPT=`value mopt`; [ $MOPT ] || MOPT="noatime,nodiratime,suid,dev,exec,async"
CHANGES=`value changes`
PFULL=`value pfull`
RAMSIZE=`value ramsize`; [ $RAMSIZE ] || RAMSIZE=60%
LOAD=`value load | sed 's/;/|/g'`; [ $LOAD ] || LOAD=._null
NOLOAD=`value noload | sed 's/;/|/g'`; [ $NOLOAD ] || NOLOAD=._null
EXTRAMOD=`value extramod | sed 's/;/ /g'`
RAMMOD=`value rammod | sed 's/;/|/g'`
ROOTCOPY=`value rootcopy`
FOLDER=live
livedbg=/var/log/livedbg
LOGFILE=/var/log/boot.log

## Let's start!
echo $i"loading kernel modules..."

MODPBLST=`value modprobe.blacklist | sed 's/,/|/g'`

if [ -n "$MODPBLST" ]; then
    sed -E "s/($MODPBLST) //g" -i modlist
    MODPBLST=`value modprobe.blacklist | sed 's/,/ /g;s/[_-]/?/g'`
    for MODULE in $MODPBLST; do
    find /lib/modules/$(uname -r)/kernel/ -name "$MODULE"'.*' -delete 2>/dev/null
    done
fi

if param nocd || [ $IP ]; then
sed 's/pata_[0-9a-z]\{3,\} //g' -i modlist
fi

#for MODULE in $(cat modlist)
#do
#modprobe $MODULE 2> /dev/null
#done

# Load kernel modules
modprobe -qa `cat modlist`

mount -nt devtmpfs none /dev

# Load network kernel modules in case of PXE boot
if [ $IP ]; then
    load_net_modules
    udhcpc
fi

# Create /etc/fstab and mount devices:
fstab

debug
# Find *.cfg file:
echo $i"searching for $CFG file"
if [ $IP ]; then BOOTDEV=network; CFGDEV=/mnt/nfs
    mkdir -p /mnt/nfs/storage
    modprobe -q nfsv4; mount -t nfs4 $IP:$NFSPATH /mnt/nfs -o ro,nolock 2>/dev/null || { modprobe -q nfsv3; mount -t nfs $IP:$NFSPATH /mnt/nfs -o ro,nolock 2>/dev/null; }
    MAC=`ifconfig | grep eth0 | cut -d: -f5-7 | sed s/://g | cut -d" " -f1`
    if [ "$CHANGES" = /srv/pxe/storage ]; then
	if lsmod | grep -q nfsv3; then
	    mount -t nfs $IP:/srv/pxe/storage /mnt/nfs/storage -o rw,nolock 2>/dev/null && { mkdir -p /mnt/nfs/storage/client-$MAC/changes/home; CHANGES="/storage/client-$MAC"; }
	else
	    mount -t nfs4 $IP:/srv/pxe/storage /mnt/nfs/storage -o rw,nolock 2>/dev/null && { mkdir -p /mnt/nfs/storage/client-$MAC/changes/home; CHANGES="/storage/client-$MAC"; }
	fi
    fi
    if [ $FROM ]; then
        FOLDER=$FROM/live
    fi
elif [ $ISO ]; then CFGDEV=/mnt/isoloop
    locate -e $FROM && { BOOTDEV=/mnt/$DEV; mkdir /mnt/isoloop; mount -o loop /mnt/$DEV/$LPTH /mnt/isoloop; ISOSRC=/mnt/$DEV/$LPTH; }
else
    if [ $FROM ]; then
	locate -e $FROM/live/$CFG
	if [ $? -eq 0 ]; then
	    DIR=`echo $LPTH | rev | cut -d/ -f3- | rev`; [ $DIR ] && FOLDER=$DIR/live
	else
	    echo -e "${YELLOW}from= cheatcode is incorrect, press enter to search through all devices${RST}"
	    read -s; search -e live/$CFG
	fi
    else
	search -e live/$CFG || lazy -e live/$CFG
    fi
    CFGDEV=/mnt/$DEV
fi

[ -e $CFGDEV/$FOLDER/$CFG ] && PTH=$CFGDEV/$FOLDER || . fatal

# Set some variables to export as environment variables
DELAY=`value delay`; [ $DELAY ] && { echo $i"delaying $DELAY sec (waiting for slow devices to settle)"; sleep $DELAY; }
BOOTDEV=$CFGDEV
MODDIR=$PTH/modules
BASEDIR=${PTH%/*}
PORTDIR=$PTH
PORTCFG=$CFGDEV/$FOLDER/$CFG
echo $i"using data from $PTH"
echo  $PTH > /etc/homedrv

# Create symlinks used often by porteus scripts:
if [ $CFGDEV = /mnt/nfs -o $CFGDEV = /mnt/isoloop ];then
    ln -sf /mnt/live$PTH/modules  /porteus/modules
    ln -sf /mnt/live$PTH/optional /porteus/optional
else
    ln -sf $PTH/modules  /porteus/modules
    ln -sf $PTH/optional /porteus/optional
fi

debug
pos_fail () {
		rm -f /memory/changes/._test1 /memory/changes/._test2; umount /memory/changes
		echo && echo -e "[1;33m""A Windows filesystem (FAT, NTFS) or other non-posix compatible filesystem\nhas been detected on $CHANGES or $(echo $CHANGES |sed 's|\(.*\)/.*|\1|') .\nYour changes cannot be saved directly to the specified storage media with this\nsetup.""[0m"
		echo "press enter to continue in '[1;36mAlways Fresh[0m' mode for this session"
		read; rmdir /mnt/$DEV/$LPTH/changes 2>/dev/null; fail_chn
}

pos_fail1 () {
		rm -f /memory/changes/._test1 /memory/changes/._test2; umount /memory/changes
echo && echo -e "[1;33m""A Windows filesystem (FAT, NTFS) or other non-posix compatible filesystem\nhas been detected on $(echo $CHANGES |sed 's|\(.*\)/.*|\1|').\nYour changes cannot be saved directly to the specified storage media with this\nsetup.""[0m"
		echo "press enter to continue in '[1;36mAlways Fresh[0m' mode for this session"
		read; rmdir /mnt/$DEV/$LPTH/changes 2>/dev/null; fail_chn

}

# Setup changes:

if [ $PFULL ]; then
CHANGES=$PFULL
    echo $i"setting up directory for changes"
    CHNEXIT=`echo $CHANGES | cut -d: -f1`; 
    [ $CHNEXIT = EXIT ] && CHANGES=`echo $CHANGES | cut -d: -f2-`
    [ $CHNEXIT = +EXIT ] && CHANGES=`echo $CHANGES | cut -d: -f2-`   
    
    [ -r $CFGDEV/$CHANGES ] && { DEV=`echo $CFGDEV | sed s@/mnt/@@`; LPTH=$CHANGES; } || locate -r $CHANGES
    if [ $? -eq 0 ]; then
	if [ -d /mnt/$DEV/$LPTH/pfull/filesystem/var ] && [ -d /mnt/$DEV/$LPTH/pfull/filesystem/usr ] && [ -d /mnt/$DEV/$LPTH/pfull/filesystem/root ]; then
#	    mkdir -p /mnt/$DEV/$LPTH/changes 2>/dev/null && \
	    mount -o bind /mnt/$DEV/$LPTH/pfull /memory/changes && touch /memory/changes/._test1 2>/dev/null
	else
echo && echo
echo "[1;36m""Data not found for pseudo-full install /mnt/$DEV/$LPTH/pfull
Press space/enter to unmount all devices and reboot or any other key
to drop to the debug shell.""[0m"
read -s -n1 ans
if [ "$ans" = "" ]; then
    umount /mnt/* 2>/dev/null
    umount -a 2>/dev/null
    reboot -f
else
    echo -en "[1;36m""Here is debugging shell for you, unmount all partitions and press Ctrl+Alt+Del\nwhen you finish.\n\nGood luck!\n""[0m"
    sh
fi
	fi
	if [ $? -eq 0 ]; then
	    echo $i"testing filesystem on "$CHANGES" for posix compatibility"
	    ln -s /memory/changes/._test1 /memory/changes/._test2 2>/dev/null && chmod +x /memory/changes/._test1 2>/dev/null && [ -x /memory/changes/._test1 ] && chmod -x /memory/changes/._test1 2>/dev/null && [ ! -x /memory/changes/._test1 ] && rm -f /memory/changes/._test1 /memory/changes/._test2
ret=$? 
	    if [ $ret -ne 0 ]; then
            posfail=yes
            fi
if [ $CHNEXIT = +EXIT ];then
  if [ ! -d /mnt/$DEV/$LPTH ]; then
  APTH=$(echo /mnt/$DEV/$LPTH |sed 's|\(.*\)/.*|\1|')
    rm -f /memory/changes/._test1 /memory/changes/._test2; umount /memory/changes
#	    mkdir -p $APTH/changes 2>/dev/null && \
	    mount -o bind $APTH/pfull /memory/changes && touch /memory/changes/._test1 2>/dev/null
  else
    rm -f /memory/changes/._test1 /memory/changes/._test2; umount /memory/changes
#	    mkdir -p /mnt/$DEV/$LPTH/changes 2>/dev/null && \
	    mount -o bind /mnt/$DEV/$LPTH/pfull /memory/changes && touch /memory/changes/._test1 2>/dev/null
  fi
	    ln -s /memory/changes/._test1 /memory/changes/._test2 2>/dev/null && chmod +x /memory/changes/._test1 2>/dev/null && [ -x /memory/changes/._test1 ] && chmod -x /memory/changes/._test1 2>/dev/null && [ ! -x /memory/changes/._test1 ] && rm -f /memory/changes/._test1 /memory/changes/._test2
fi
ret1=$?

            if [ $ret -ne 0 ] && [ "$posfail" = "yes" ]; then
		rm -f /memory/changes/._test1 /memory/changes/._test2; umount /memory/changes
		echo && echo -e "[1;33m""A Windows filesystem (FAT, NTFS) or other non-posix compatible filesystem\nhas been detected on $CHANGES or $(echo $CHANGES |sed 's|\(.*\)/.*|\1|') .\nYour changes cannot be saved directly to the specified storage media with this\nsetup. Please use the '[1;36m Save file manager[1;33m' to create a .dat container\nand use it for saving your changes after your next reboot.""[0m"
		echo "boot will continue in '[1;36mAlways Fresh[0m' mode for this session"
		sleep 10; rmdir /mnt/$DEV/$LPTH/changes; fail_chn

            elif [ $ret1 -ne 0 ] && [ -z "$posfail" ]; then
		rm -f /memory/changes/._test1 /memory/changes/._test2; umount /memory/changes
echo && echo -e "[1;33m""A Windows filesystem (FAT, NTFS) or other non-posix compatible filesystem\nhas been detected on $(echo $CHANGES |sed 's|\(.*\)/.*|\1|').\nYour changes cannot be saved directly to the specified storage media with this\nsetup.""[0m"
		echo "press enter to continue in '[1;36mAlways Fresh[0m' mode for this session"
		read; rmdir /mnt/$DEV/$LPTH/changes 2>/dev/null; fail_chn

	    else
		echo $i"filesystem is posix compatible"; CHNDEV=/mnt/$DEV

        	if [ -f /memory/changes/clear-changes-on-reboot ]; then
                      echo $i"[1;36m""changes content signalled to be cleared""[0m"
                      rm -rf /memory/changes/*
		fi
	    	    	    
		if [ "$CHNEXIT" = EXIT -o "`egrep -o " changes-ro( |\$)" /proc/cmdline`" ]; then
		    CHNEXIT=$CHNDEV/$LPTH; echo $CHNEXIT >/tmp/changes-exit
		    param changes-ro && echo $i"[1;36m""changes will not be saved for this session""[0m" || echo $i"[1;36m""changes will be saved only during reboot/shutdown""[0m"

			setClean
			mkdir -p /memory/images/changes-exit
			mount -n --move /memory/changes /memory/images/changes-exit
			umount /memory/changes 2>/dev/null;
			mount -nt tmpfs -o size=$RAMSIZE tmpfs /memory/changes;
			CHANGES=memory
		fi

		 if [ $CHNEXIT = +EXIT ]; then
		    CHNEXIT=$CHNDEV/$LPTH; echo $CHNEXIT >/tmp/changes-exit
		    echo $i"[1;36m""changes will be saved only during reboot/shutdown""[0m"

  	      if [ ! -d /mnt/$DEV/$LPTH ]; then
              APTH=$(echo /mnt/$DEV/$LPTH |sed 's|\(.*\)/.*|\1|')
  	      echo $i"[1;36m""option +EXIT is being used, changes are NOT written in memory""[0m"
  	      echo $i"[1;36m""temporary changes will be in $APTH/tmp-pfull ""[0m"
umount /memory/changes 2>/dev/null; rmdir $APTH/changes 2>/dev/null
mount -o loop /mnt/$DEV/$LPTH /memory/changes 2>/dev/null
			setClean

			mkdir -p /memory/images/changes-exit
			mount -n --move /memory/changes /memory/images/changes-exit
			#umount /memory/changes 2>/dev/null;
			#mount -nt tmpfs -o size=$RAMSIZE tmpfs /memory/changes;
			#CHANGES=memory
  	      rm -rf $APTH/tmp-pfull 2> /dev/null
  	      mkdir -p $APTH/tmp-pfull
  	      mount -o bind $APTH/tmp-pfull /memory/changes
  	      else
  	      echo $i"[1;36m""option +EXIT is being used, changes are NOT written in memory""[0m"
  	      echo $i"[1;36m""temporary changes will be in /mnt/$DEV/$LPTH/tmp-pfull""[0m"
		    #umount /memory/changes;
			setClean
			mkdir -p /memory/images/changes-exit
			mount -n --move /memory/changes /memory/images/changes-exit
			umount /memory/changes 2>/dev/null;
			#mount -nt tmpfs -o size=$RAMSIZE tmpfs /memory/changes;
			#CHANGES=memory
  	      rm -rf /mnt/$DEV/$LPTH/tmp-pfull 2> /dev/null
  	      mkdir -p /mnt/$DEV/$LPTH/tmp-pfull
  	      mount -o bind /mnt/$DEV/$LPTH/tmp-pfull /memory/changes


  	      fi
		fi
	    fi
	else
	    echo $i"changes not writable, using memory instead"; CHGERR=2; umount /memory/changes 2>/dev/null; fail_chn
	fi
    else
	fail $CHANGES; fail_chn
    fi

elif [ $CHANGES ]; then
    echo $i"setting up directory for changes"
    CHNEXIT=`echo $CHANGES | cut -d: -f1`; 
    [ $CHNEXIT = EXIT ] && CHANGES=`echo $CHANGES | cut -d: -f2-`
    [ $CHNEXIT = +EXIT ] && CHANGES=`echo $CHANGES | cut -d: -f2-`   
    
    [ -r $CFGDEV/$CHANGES ] && { DEV=`echo $CFGDEV | sed s@/mnt/@@`; LPTH=$CHANGES; } || locate -r $CHANGES
    if [ $? -eq 0 ]; then
	if [ -d /mnt/$DEV/$LPTH ]; then
	    mkdir -p /mnt/$DEV/$LPTH/changes 2>/dev/null && \
	    mount -o bind /mnt/$DEV/$LPTH/changes /memory/changes && touch /memory/changes/._test1 2>/dev/null
	else
	    if blkid /mnt/$DEV/$LPTH 2>/dev/null | cut -d" " -f3- | grep -q _LUKS; then
		for x in dm_crypt cryptd cbc sha256_generic aes_generic aes_x86_64; do modprobe $x 2>/dev/null; done
		losetup /dev/loop2 /mnt/$DEV/$LPTH
		echo $i"found encrypted .dat container"
		cryptsetup luksOpen /dev/loop2 crypt
		mount /dev/mapper/crypt /memory/changes 2>/dev/null && touch /memory/changes/._test1 2>/dev/null
	    else
		mount -o loop /mnt/$DEV/$LPTH /memory/changes 2>/dev/null && touch /memory/changes/._test1 2>/dev/null
	    fi
	fi
	if [ $? -eq 0 ]; then
	    echo $i"testing filesystem on "$CHANGES" for posix compatibility"
	    ln -s /memory/changes/._test1 /memory/changes/._test2 2>/dev/null && chmod +x /memory/changes/._test1 2>/dev/null && [ -x /memory/changes/._test1 ] && chmod -x /memory/changes/._test1 2>/dev/null && [ ! -x /memory/changes/._test1 ] && rm -f /memory/changes/._test1 /memory/changes/._test2
ret=$? 
	    if [ $ret -ne 0 ]; then
            posfail=yes
            fi
if [ $CHNEXIT = +EXIT ];then
  if [ ! -d /mnt/$DEV/$LPTH ]; then
  APTH=$(echo /mnt/$DEV/$LPTH |sed 's|\(.*\)/.*|\1|')
    rm -f /memory/changes/._test1 /memory/changes/._test2; umount /memory/changes
	    mkdir -p $APTH/changes 2>/dev/null && \
	    mount -o bind $APTH/changes /memory/changes && touch /memory/changes/._test1 2>/dev/null
  else
    rm -f /memory/changes/._test1 /memory/changes/._test2; umount /memory/changes
	    mkdir -p /mnt/$DEV/$LPTH/changes 2>/dev/null && \
	    mount -o bind /mnt/$DEV/$LPTH/changes /memory/changes && touch /memory/changes/._test1 2>/dev/null
  fi
	    ln -s /memory/changes/._test1 /memory/changes/._test2 2>/dev/null && chmod +x /memory/changes/._test1 2>/dev/null && [ -x /memory/changes/._test1 ] && chmod -x /memory/changes/._test1 2>/dev/null && [ ! -x /memory/changes/._test1 ] && rm -f /memory/changes/._test1 /memory/changes/._test2
fi
ret1=$?

            if [ $ret -ne 0 ] && [ "$posfail" = "yes" ]; then
		rm -f /memory/changes/._test1 /memory/changes/._test2; umount /memory/changes
		echo && echo -e "[1;33m""A Windows filesystem (FAT, NTFS) or other non-posix compatible filesystem\nhas been detected on $CHANGES or $(echo $CHANGES |sed 's|\(.*\)/.*|\1|') .\nYour changes cannot be saved directly to the specified storage media with this\nsetup. Please use the '[1;36m Save file manager[1;33m' to create a .dat container\nand use it for saving your changes after your next reboot.""[0m"
		echo "boot will continue in '[1;36mAlways Fresh[0m' mode for this session"
		sleep 10; rmdir /mnt/$DEV/$LPTH/changes; fail_chn

            elif [ $ret1 -ne 0 ] && [ -z "$posfail" ]; then
		rm -f /memory/changes/._test1 /memory/changes/._test2; umount /memory/changes
echo && echo -e "[1;33m""A Windows filesystem (FAT, NTFS) or other non-posix compatible filesystem\nhas been detected on $(echo $CHANGES |sed 's|\(.*\)/.*|\1|').\nYour changes cannot be saved directly to the specified storage media with this\nsetup.""[0m"
		echo "press enter to continue in '[1;36mAlways Fresh[0m' mode for this session"
		read; rmdir /mnt/$DEV/$LPTH/changes 2>/dev/null; fail_chn

	    else
		echo $i"filesystem is posix compatible"; CHNDEV=/mnt/$DEV

        	if [ -f /memory/changes/clear-changes-on-reboot ]; then
                      echo $i"[1;36m""changes content signalled to be cleared""[0m"
                      rm -rf /memory/changes/*
		fi
	    	    	    
		if [ "$CHNEXIT" = EXIT -o "`egrep -o " changes-ro( |\$)" /proc/cmdline`" ]; then
		    CHNEXIT=$CHNDEV/$LPTH; echo $CHNEXIT >/tmp/changes-exit
		    param changes-ro && echo $i"[1;36m""changes will not be saved for this session""[0m" || echo $i"[1;36m""changes will be saved only during reboot/shutdown""[0m"

			setClean
			mkdir -p /memory/images/changes-exit
			mount -n --move /memory/changes /memory/images/changes-exit
			umount /memory/changes 2>/dev/null;
			mount -nt tmpfs -o size=$RAMSIZE tmpfs /memory/changes;
			CHANGES=memory
		fi

		 if [ $CHNEXIT = +EXIT ]; then
		    CHNEXIT=$CHNDEV/$LPTH; echo $CHNEXIT >/tmp/changes-exit
		    echo $i"[1;36m""changes will be saved only during reboot/shutdown""[0m"

  	      if [ ! -d /mnt/$DEV/$LPTH ]; then
              APTH=$(echo /mnt/$DEV/$LPTH |sed 's|\(.*\)/.*|\1|')
  	      echo $i"[1;36m""option +EXIT is being used, changes are NOT written in memory""[0m"
  	      echo $i"[1;36m""temporary changes will be in $APTH/tmp-changes ""[0m"
umount /memory/changes 2>/dev/null; rmdir $APTH/changes 2>/dev/null
mount -o loop /mnt/$DEV/$LPTH /memory/changes 2>/dev/null
			setClean

			mkdir -p /memory/images/changes-exit
			mount -n --move /memory/changes /memory/images/changes-exit
			#umount /memory/changes 2>/dev/null;
			#mount -nt tmpfs -o size=$RAMSIZE tmpfs /memory/changes;
			#CHANGES=memory
  	      rm -rf $APTH/tmp-changes 2> /dev/null
  	      mkdir -p $APTH/tmp-changes
  	      mount -o bind $APTH/tmp-changes /memory/changes
  	      else
  	      echo $i"[1;36m""option +EXIT is being used, changes are NOT written in memory""[0m"
  	      echo $i"[1;36m""temporary changes will be in /mnt/$DEV/$LPTH/tmp-changes""[0m"
		    #umount /memory/changes;
			setClean
			mkdir -p /memory/images/changes-exit
			mount -n --move /memory/changes /memory/images/changes-exit
			umount /memory/changes 2>/dev/null;
			#mount -nt tmpfs -o size=$RAMSIZE tmpfs /memory/changes;
			#CHANGES=memory
  	      rm -rf /mnt/$DEV/$LPTH/tmp-changes 2> /dev/null
  	      mkdir -p /mnt/$DEV/$LPTH/tmp-changes
  	      mount -o bind /mnt/$DEV/$LPTH/tmp-changes /memory/changes


  	      fi
		fi
	    fi
	else
	    echo $i"changes not writable, using memory instead"; CHGERR=2; umount /memory/changes 2>/dev/null; fail_chn
	fi
    else
	fail $CHANGES; fail_chn
    fi
else
     echo $i"changes cheatcode not found, using memory only"; fail_chn
fi

if [ $PFULL ]; then
mkdir -p /memory/changes/filesystem/mnt/live
else
mkdir -p /memory/changes/upperdir/mnt/live
fi

debug

# Find modules:
#find $PTH $PTH/base $PTH/modules -maxdepth 1 -name "*.squashfs" 2>/dev/null | egrep -ve "$NOLOAD" | sort >/tmp/modules
#find $PTH/optional -name "*.squashfs" 2>/dev/null | egrep -e "$LOAD" | sort >>/tmp/modules

# Find base modules:
find $PTH $PTH/base -maxdepth 1 -name "*.squashfs" 2>/dev/null | egrep -ve "$NOLOAD" | sort >/tmp/modules

if [ "$EXTRAMOD" ]; then
	for folder in $EXTRAMOD; do
		echo $i"searching for additional modules in $folder"
		locate -d $folder && { find /mnt/$DEV/$LPTH -name "*.squashfs" 2>/dev/null | egrep -ve "$NOLOAD" | sort >>/tmp/modules; } || fail $folder
	done
fi

if param nvidia_detect; then
	echo $i"detecting nvidia GPU"
	lspci >/tmp/lspci
	nvlist=`grep -i "030.: 10de:" /tmp/lspci | cut -d":" -f4`
	if param nonvidia; then
	echo $i"skipping nvidia GPU detection"
	elif [ -n "$nvlist" ]; then
	for nv in $nvlist
	do
		echo $i"$nv chip found, checking which nvidia driver supports it"
		if grep -sqi 10de$nv /usr/share/nvidia/nvidia.ids; then NV=nvidia; break
		elif grep -sqi 10de$nv /usr/share/nvidia/nvidia-legacy-390xx.ids; then NV=nv390; break
		elif grep -sqi 10de$nv /usr/share/nvidia/nvidia-legacy-340xx.ids; then NV=nv340; break
		else echo $i"$nv chip is not supported by nvidia driver"
		fi
	done
	if [ $NV ]; then
		echo $i"$NV driver will be activated"
		find $PTH/optional -name "$NV*.squashfs" 2>/dev/null >>/tmp/modules
		NOLOAD="$NOLOAD|mesa-vulkan-drivers"
	fi
	else echo $i"could not find any nVidia GPU on this PC"
	fi
fi

# Find other modules:
find $PTH/modules -name "*.squashfs" 2>/dev/null | egrep -ve "$NOLOAD" | sort >>/tmp/modules
find $PTH/optional -name "*.squashfs" 2>/dev/null | egrep -e "$LOAD" | sort >>/tmp/modules

#if param base_only; then
#grep live /tmp/modules | grep -v modules > /tmp/mod
#    grep base/0 /tmp/modules > /tmp/mod
#    mv /tmp/mod /tmp/modules
#else
#    if [ "$EXTRAMOD" ]; then
#	for folder in $EXTRAMOD; do
#	    echo $i"searching for additional modules in $folder"
#	    locate -d $folder && { find /mnt/$DEV/$LPTH -name "*.squashfs" 2>/dev/null | egrep -ve "$NOLOAD" | sort >>/tmp/modules; } || fail $folder
#	done
#    fi
#fi

# Copy data to RAM:
if param copy2ram; then
    echo $i"copying data to RAM, this may take some time..."
    [ $RAMMOD ] && { egrep -e "$RAMMOD" /tmp/modules > /tmp/rammod; cpmod /tmp/rammod; } || cpmod /tmp/modules
fi

#======================================
# IncludeModules
#--------------------------------------
IncludeModules

# Add "changes on exit" device/file/folder:
#if [ -e /tmp/changes-exit ]; then
#    mkdir /memory/images/changes
#    if [ -d $CHNEXIT ]; then
#	mount -o bind $CHNEXIT/changes /memory/images/changes
#    elif [ -b /dev/mapper/crypt ]; then
#	mount /dev/mapper/crypt /memory/images/changes
#    else
#	mount -o loop $CHNEXIT /memory/images/changes
#    fi
#    echo "  $m  changes"; mount -no remount,add:1:/memory/images/changes=ro aufs /union
#    echo $CHNEXIT/changes >>/tmp/modules
#    param changes-ro && rm /tmp/changes-exit
#fi

debug
# Copy /rootcopy folder:
if param norootcopy; then
    ROOTCOPY=none
    echo $i"skipping /rootcopy directory"
else
    if [ $ROOTCOPY ]; then
	locate -d $ROOTCOPY
	if [ $? -eq 0 ]; then echo $i"copying content of $ROOTCOPY directory"; cp -af /mnt/$DEV/$LPTH/. /union/. 2>/dev/null; else fail $ROOTCOPY; ROOTCOPY=none; fi
    else
	ROOTCOPY=none
	echo $i"copying content of $PTH/rootcopy directory"
	cp -af $PTH/rootcopy/. /union/. 2>/dev/null
    fi
fi

################################################################################
mkdir -p /union/dev /union/mnt /union/live /union/proc /union/sys /union/srv /union/media /union/run /union/tmp
chmod 1777 /union/tmp
################################################################################

## Finish:
# Create 7 free loop devices for truecrypt, etc...
#x=`losetup | tail -n1 | cut -d: -f1 | sed 's@/dev/loop@@'`
x=`grep -oE 'loop[0-9]+$' /proc/partitions  | tail -n1 | tr -d [:alpha:]`
let y=x+20
#while [ $x -le $y ]; do [ -b /dev/loop$y ] && break || mknod /dev/loop$y b 7 $y; let y=y-1; done
#x=`losetup | tail -n1 | cut -d: -f1 | sed 's@/dev/loop@@'`; let y=x+20
while [ $x -le $y ]; do [ -b /dev/loop$y ] && break || mknod /dev/loop$y b 7 $y; chmod g+rw-x,o-rwx /dev/loop$y; let y=y-1; done

if param nonetwork; then
    echo $i"disabling dhcpcd and NetworkManager services"
    chmod -x /union/etc/rc.d/rc.inet1 /union/etc/rc.d/rc.networkmanager 2>/dev/null
    nma=/union/etc/xdg/autostart/nm-applet.desktop
    test -e $nma && ! grep -q "Hidden=true" $nma && echo "Hidden=true" >> $nma
fi

if [ "$IP" -a -x /union/etc/rc.d/rc.networkmanager ]; then
    if [ -z "`egrep -o "copy2ram( |\$)" /proc/cmdline`" -o -d /mnt/nfs/storage/client-$MAC ]; then
#    if [ -z "`egrep -o "^copy2ram" /union/etc/bootcmd.cfg`" -o -d /mnt/nfs/storage/client-$MAC ]; then
	echo "nameserver $IP" > /union/etc/resolv.conf
	nmc=/union/etc/NetworkManager/NetworkManager.conf; HW=`ifconfig | grep eth0 | cut -dW -f2 | cut -d" " -f2`
	! grep -q "unmanaged-devices=mac:$HW" $nmc && sed -i '/\[keyfile\]/ a\unmanaged-devices=mac:'$HW'' $nmc
    fi
fi

if [ $IP ] && [ -f /etc/resolv.conf ]; then
    cp /etc/resolv.conf /union/etc/resolv.conf
fi

# Start bluetooth if cheat exists
if param bluetooth; then
	echo "Starting bluetooth ..."
	[ -e /union/etc/rc.d/rc.bluetooth ] && chmod +x /union/etc/rc.d/rc.bluetooth
fi

cp -af /dev/console /union/dev

fstab

debug
#if param copy2ram; then
if param copy2ram; then
    [ $CFGDEV = /mnt/isoloop -o $CFGDEV = /mnt/nfs ] && { umount `grep $CFGDEV /etc/mtab | sed -n 1p | cut -d" " -f2` 2>/dev/null; CFGDEV=$BOOTDEV; }
    CHNDISK=`echo $CHNDEV | cut -b6-8`; CFGDISK=`echo $CFGDEV | cut -b6-8`; REMOVABLE=`cat /sys/block/$CFGDISK*/removable 2>/dev/null`
    if [ -z "`egrep -o " noeject( |\$)" /etc/cmdline`" -a "$CHNDISK" != "$CFGDISK" ]; then
	if [ "$REMOVABLE" = 1 ]; then
	    for rdisk in `ls /mnt | grep $CFGDISK`; do
		umount -n /mnt/$rdisk 2>/dev/null && rmdir /mnt/$rdisk
		if [ $? -eq 0 ]; then
		    ! grep -qw "/dev/$rdisk.*iso9660" /etc/fstab && echo $rdisk >> /tmp/ejected || eject /dev/$rdisk
		    sed -i "/$rdisk/d" /etc/fstab
		fi
	    done
	    [ `ls /mnt | grep $CFGDISK` ] || echo $i"[1;36m""finished copying to RAM - booting media can be removed safely""[0m"
	else
	    if param nohd; then umount $CFGDEV 2>/dev/null; rmdir $CFGDEV 2>/dev/null; fi
	fi
    fi
fi

# Create debug file:
[ -e /tmp/devices ] && { echo "# Recognized devices:" >$livedbg; cat /tmp/devices >>$livedbg; }
[ $BOOTDEV ] && CFGDEV=$BOOTDEV
echo $CFGDEV > /etc/cfgdev
echo -e "\n# Booting device:\n$CFGDEV\n\n# data found in:\n$PTH\n\n# Changes are stored in:\n$CHANGES\n\n# Non standard /rootcopy dir:\n$ROOTCOPY\n\n# Modules activated during boot time:" >>$livedbg; cat /tmp/modules >>$livedbg
grep "^/mnt/isoloop" $livedbg && echo "" >> $livedbg && echo "ISO=$ISOSRC" >> $livedbg
#if [ $ISO ]; then
#	[ -d /union/mnt/isoloop ] && rmdir /union/mnt/isoloop
#	ln -sf /mnt/live/mnt/isoloop /union/mnt/isoloop
#fi
cp -af $livedbg /union/var/log/porteus-livedbg

cat /proc/cmdline

echo $i"changing root directory" 
for x in `ls -1 /union/mnt | grep -v live`; do
 echo $x
 [ -d /union/mnt/$x ] && rmdir /union/mnt/$x # Will fail if dir not empty!
 [ -L /union/mnt/$x ] && rm -f /union/mnt/$x
done
#if chk_bootcfg noauto; then
if grep -q noauto /proc/cmdline; then
  FDEV=`echo $CFGDEV | sed s@/mnt/@@`
  CDEV=`echo $CHNDEV | sed s@/mnt/@@`
[ $CDEV ] && echo $CDEV > /tmp/cdev
    for x in `grep /mnt/ /etc/fstab | cut -d/ -f3`; do mkdir -p /union/mnt/$x;
if grep -q copy2ram /proc/cmdline; then
  if [ $CFGDEV = $CHNDEV ]; then
[ "$FDEV" = "$x" ] && continue  # keep $x mounted
  else
[ "$CDEV" = "$x" ] && continue  # keep $x mounted
  fi
fi
if grep -qv copy2ram /proc/cmdline; then
 [ "$CDEV" = "$x" ] && continue  # keep $x mounted
fi
 umount -n /mnt/$x 2>/dev/null && rmdir /mnt/$x;
 done
else
    #grep /mnt/ /etc/fstab >> /union/etc/mtab
    for x in `grep /mnt/ /etc/fstab | cut -d/ -f3`; do mkdir -p /union/mnt/$x; mount -n --move /mnt/$x /union/mnt/$x; rmdir /mnt/$x; done
fi

#sed -i 's/ ntfs / ntfs-3g /g' /etc/fstab
#cp -f /etc/fstab /union/etc 2>/dev/null

# Add all symlinks of all mount points at /mnt to union
#for x in `ls -1 /mnt`; do
# [ -d /union/mnt/$x ] && rmdir /union/mnt/$x
# ln -sf /mnt/live/mnt/$x /union/mnt/$x
#done

for MODULE in `sed 's/ /\n/g' modlist | grep ata_`
do rmmod $MODULE 2>/dev/null
done

debug

echo "[1m""live system is ready now - starting Debian""[0m"

if param init=/bin/systemd; then
	if [ -f /union/lib/systemd/systemd ]; then
cp -f /union/lib/systemd/systemd /bin
		if [ $? -eq 0 ]; then
	mkdir -p /union/mnt/live
echo "[1m""using systemd...""[0m"
    pivot_root /union  /union/mnt/live
    exec usr/sbin/chroot . /mnt/live/bin/systemd "$@" <dev/console >dev/console 2>&1
		else
    echo -e "[31m""!!ERROR!!\nSomething went wrong and I cannot continue.\nPress Ctrl+Alt+Del to reboot.""[0m"
    sh  
		fi
	else
 echo "[1m""systemd not found, trying to use initscripts...""[0m" 
cp -f /union/sbin/init /bin
		if [ $? -eq 0 ]; then
	mkdir -p /union/mnt/live
    pivot_root /union  /union/mnt/live
    exec usr/sbin/chroot . /mnt/live/bin/init "$@" <dev/console >dev/console 2>&1
		else
    echo -e "[31m""!!ERROR!!\nSomething went wrong and I cannot continue.\nPress Ctrl+Alt+Del to reboot.""[0m"
    sh
		fi
	fi
else
    if [ -L /union/sbin/init ]; then
echo "[1m""/sbin/init appears to be a symlink, assuming systemd-sysv is installed""[0m"
echo "[1m""trying to switch to systemd now...""[0m"
cp -f /union/lib/systemd/systemd /bin
		if [ $? -eq 0 ]; then
	mkdir -p /union/mnt/live
echo "[1m""using systemd...""[0m"
    pivot_root /union  /union/mnt/live
    exec usr/sbin/chroot . /mnt/live/bin/systemd "$@" <dev/console >dev/console 2>&1
		else
    echo -e "[31m""!!ERROR!!\nSomething went wrong and I cannot continue.\nPress Ctrl+Alt+Del to reboot.""[0m"
    sh  
		fi
    else
cp -f /union/sbin/init /bin
		if [ $? -eq 0 ]; then
	mkdir -p /union/mnt/live
    pivot_root /union  /union/mnt/live
    exec usr/sbin/chroot . /mnt/live/bin/init "$@" <dev/console >dev/console 2>&1
		else
    echo -e "[31m""!!ERROR!!\nSomething went wrong and I cannot continue.\nPress Ctrl+Alt+Del to reboot.""[0m"
    sh
		fi
    fi
fi


