#!/bin/sh
## Functions for porteus init
## Author brokenman, modified for Debiandog by fredx181
# 2024-03-18 fredx181 modified for pseudo-full install

# Modified by gumanzoy https://github.com/PocketHandyBox

# Export some color functions
RED=`echo -e '\e[1;31m'`
GREEN=`echo -e '\e[1;32m'`
YELLOW=`echo -e '\e[1;33m'`
BLUE=`echo -e '\e[1;34m'`
PURPLE=`echo -e '\e[1;35m'`
CYAN=`echo -e '\e[1;36m'`
BOLD=`echo -e '\e[1m'`
RST=`echo -e '\e[0m'` # Reset Color
i="${YELLOW}^ ${RST}"
m="${YELLOW}->${RST}"

param() {
egrep -qo "(^| )$1( |\$)" /proc/cmdline
}

value() {
egrep -o "(^| )$1=[^ ]+" /proc/cmdline | cut -d= -f2 | tail -n1
}

multivalue() {
val=""
val=`egrep -o "(^| )$1=[^ ]+" /proc/cmdline | cut -d= -f2` && echo $val | sed 's/ /,/g'
}

debug() {
[ $DBUG ] || return 0
echo -e "\n: Debugging started. Here is the shell for you. Type your desired commands."
echo -en ": Hit Ctrl+D to continue booting or press Ctrl+Alt+Del to reboot."
sh
}

# Load network kernel modules for PXE boot
load_net_modules() {
#softdep for r8169 https://bugzilla.kernel.org/show_bug.cgi?id=204343
lspci | grep 0200: >/tmp/lspci
grep -q 10ec: /tmp/lspci && modprobe -q realtek
grep -q 14e4: /tmp/lspci && modprobe -q broadcom
for x in `cut -d: -f3-4 /tmp/lspci | sed s/:/.*/g | tr a-z A-Z`; do
	mod=`grep $x /lib/modules/$(uname -r)/modules.alias | tail -n1 | rev | cut -d" " -f1 | rev`
	modprobe -q $mod
done
ls /sys/class/net | grep -q eth && return 0
for x in `find /lib/modules/$(uname -r)/kernel/drivers/net/ethernet -name "*.ko" | sed 's/.ko//g'`
	do mod=`basename $x`
	modprobe -q $mod
	ls /sys/class/net | grep -q eth && break || rmmod $mod 2>/dev/null
done
}

# Run fstab for setup
fstab() {
rm -f /tmp/devices
param nocd || for x in /dev/sr*; do blkid $x >>/tmp/devices; done
param nohd || blkid | egrep -v '/dev/sr|/dev/loop|/dev/mapper' >>/tmp/devices
dev=`egrep -v 'TYPE="sw|TYPE="LVM|TYPE=".*_raid_member"' /tmp/devices 2>/dev/null | cut -d: -f1 | cut -d/ -f3 | sort | uniq`
for x in $dev; do
fs=`grep -w /dev/$x /tmp/devices | egrep -o ' TYPE=[^ ]+' | cut -d'"' -f2`
if [ $fs = vfat ]; then
	echo "/dev/$x /mnt/$x vfat $MOPT,umask=0,check=s,utf8 0 0" >> /etc/fstab
elif [ $fs = ntfs ] && grep -q ntfs3 /proc/filesystems ; then
	echo "/dev/$x /mnt/$x ntfs3 $MOPT,force,sparse 0 0" >> /etc/fstab
elif [ $fs = ntfs ]; then
	echo "/dev/$x /mnt/$x ntfs $MOPT,umask=0,nls=utf8 0 0" >> /etc/fstab
else
	echo "/dev/$x /mnt/$x $fs $MOPT 0 0" >> /etc/fstab
fi
[ -d /mnt/$x ] && continue
mkdir /mnt/$x
mount /mnt/$x 2>/dev/null && continue
modprobe -q $fs && mount /mnt/$x 2>/dev/null && continue
sed -i "/$x /d" /etc/fstab
rmdir /mnt/$x
done
}

#enable_swap() {
#if [ -z "`egrep -o " noswap( |\$)" /proc/cmdline`" -a -e /tmp/devices ]; then
#	#echo -e "\n# Swap partitions:" >>/etc/fstab
#	echo -n "Loading swap partition..."
#	for x in `grep 'TYPE="swap"' /tmp/devices | cut -d: -f1`; do echo "$x none swap sw,pri=1 0 0" >>/etc/fstab; done
#fi
#}

# Mount things
mount_device() {
fs=`blkid /dev/$1 | egrep -o ' TYPE=[^ ]+' | cut -d'"' -f2`
[ "$fs" ] || return 0
mkdir /mnt/$1
if [ $fs = vfat ]; then
	mount /dev/$1 /mnt/$1 -o $MOPT,umask=0,check=s,utf8 2>/dev/null || rmdir /mnt/$1
elif [ $fs = ntfs ] && grep -q ntfs3 /proc/filesystems ; then
	mount /dev/$1 /mnt/$1 -t ntfs3 -o $MOPT,force,sparse 2>/dev/null || rmdir /mnt/$1
elif [ $fs = ntfs ]; then
	mount /dev/$1 /mnt/$1 -o $MOPT,umask=0,nls=utf8 2>/dev/null || rmdir /mnt/$1
#	ntfs-3g /dev/$1 /mnt/$1 -o $MOPT 2>/dev/null || rmdir /mnt/$1
else
	mount /dev/$1 /mnt/$1 -o $MOPT 2>/dev/null && return 0
	modprobe -q $fs && mount /dev/$1 /mnt/$1 -o $MOPT || rmdir /mnt/$1
fi
}

# Search for boot location
search() { FND=none; for x in `ls /mnt | tac`; do
[ $1 /mnt/$x/$2 ] && { DEV=$x; FND=y; break; }; done
[ $FND = y ]; }

# Delay booting a little until devices have settled
nap() { echo -en "${i}device not ready yet? delaying ${YELLOW}${SLEEP}${RST} seconds \r"; sleep 1; }
lazy() { SLEEP=6; while [ $SLEEP -gt 0 -a $FND = none ]; do nap; let SLEEP=SLEEP-1; fstab; search $*; done }

# Find location of Porteus files
locate() { LPATH=`echo $2 | cut -b-5 | sed s@/dev@/mnt@`
if [ $LPATH = /mnt/ ]; then
    DEV=`echo $2 | cut -d/ -f3`; LPTH=`echo $2 | cut -d/ -f4-`; SLEEP=6
    while [ $SLEEP -gt 0 -a ! -b /dev/$DEV ]; do nap; let SLEEP=SLEEP-1; fstab; done
    [ -d /mnt/$DEV ] || mount_device $DEV
    [ $1 /mnt/$DEV/$LPTH ]
elif [ $LPATH = UUID: -o $LPATH = LABEL ]; then
    ID=`echo $2 | cut -d: -f2 | cut -d/ -f1`; LPTH=`echo $2 | cut -d/ -f2-`; DEV=`blkid | grep $ID | cut -d: -f1 | cut -d/ -f3`; SLEEP=6
    while [ $SLEEP -gt 0 -a "$DEV" = "" ]; do nap; let SLEEP=SLEEP-1; fstab; DEV=`blkid | grep $ID | cut -d: -f1 | cut -d/ -f3`; done
    [ -d /mnt/$DEV ] || mount_device $DEV
    [ $1 /mnt/$DEV/$LPTH ]
else
    LPTH=$2; search $* || lazy $*
fi }

# Check if a location is writable
is_writable() { touch $1/.test 2>/dev/null; [ -e $1/.test ] && rm $1/.test; }

# Booting failed. Failed to find live folder. 
fail() {
echo "${i}couldn't find $1. Correct your from= cheatcode. Press 'enter' to continue booting." ; read -s
}

# Failed to initiate changes. Creating temporary changes on tmpfs for this session.
fail_chn() { mount -t tmpfs -o size=$RAMSIZE tmpfs /memory/changes; CHANGES=memory; CHNDEV=memory; touch /etc/nochanges; }

# Just draw a line
draw() { echo "${YELLOW}---------------------------------------------------------${RST}"; }

# Copy modules
cpmod() {
NUM=`grep -c '.' $1`
modfile=$1
while read x; do
    echo -en "${YELLOW}  ($NUM modules left)  ${RST} \r"; let NUM=NUM-1; NAME=`basename "$x"`
    cp "$x" /memory/copy2ram 2>/dev/null
    if [ $? -eq 0 ]; then
	sed -i s@^.*/$NAME@/memory/copy2ram/$NAME@ /tmp/modules
    else
	rm /memory/copy2ram/"$NAME"
	echo -e "${i}${CYAN}Not enough memory to copy ${NAME}${RST}"
	echo -e "${i}${CYAN}Other modules will be skipped.${RST}"
	find /memory/copy2ram -name "*.kmodsfs" | sort >/tmp/modules
	find /memory/copy2ram -name "*.squashfs" | sort >>/tmp/modules
	break
    fi
done < $modfile
echo -en "                       \r"
}

# If bootlog cheatcode is present then make log entry
blog(){
		param log && echo "$1" >> $LOGFILE
}

# Check for a boot param
#chk_bootcfg(){ grep "^$1" /union/etc/bootcmd.cfg; }

#======================================
# setClean
#--------------------------------------
setClean()
{
[ $PFULL ] && UDIR=filesystem || UDIR=upperdir
#=== 変分反映層
	mkdir -p /memory/changes/$UDIR
#=== 変分管理データ層
	mkdir -p /memory/changes/workdir

#--<継承エリア初期化>--#
local PLACE=/memory/changes/$UDIR
#	rm -rf $PLACE/boot 2>/dev/null
	rm -rf $PLACE/dev 2>/dev/null
	rm -rf $PLACE/mnt 2>/dev/null
	rm -rf $PLACE/proc 2>/dev/null
	rm -rf $PLACE/run 2>/dev/null
	rm -rf $PLACE/sys 2>/dev/null
	rm -rf $PLACE/tmp 2>/dev/null
	rm -rf $PLACE/var/lock/* 2>/dev/null
	rm -rf $PLACE/var/run 2>/dev/null
	rm -rf $PLACE/var/tmp 2>/dev/null
	rm -rf $PLACE/var/spool/cron/cron.?????? 2>/dev/null

#	chown -R guest:users $PLACE/home/guest 2>/dev/null

#--< activate 後 deactivate 無しで終了した残骸を削除する >--#
#--- delete symbolic link setting "entity & tag" ---#
local x
local DIR
local PKG
	for x in `find $PLACE -name '.act.new.*' `
	do
		DIR=${x%/*}
		PKG=${x##*/}
		PKG=${PKG#.act.new.}
#echo "x=$x DIR=$DIR PKG=$PKG" 
		if [ -h $DIR/$PKG ]
		then
			rm $DIR/$PKG
		fi
		rm $x
	done

#--- recover original entity ---#
	for x in `find $PLACE -name '.act.org.*' `
	do
#		DIR=${x%/*}
#		PKG=${x##*/}
#		PKG=${PKG#.act.org.}
#		mv $x $DIR/$PKG
		rm $x
	done
}
#======================================
# IncludeModules
#--------------------------------------
IncludeModules()
{
[ $PFULL ] && UDIR=filesystem || UDIR=upperdir
echo yes > /etc/pfull-compat
#=== 変分反映層
mkdir -p /memory/changes/$UDIR
UPPERDIR=/memory/changes/$UDIR
#=== 変分管理データ層
mkdir -p /memory/changes/workdir
WORKDIR=/memory/changes/workdir

#--<継承エリア初期化>--#
setClean

#=== 固定不変層
LOWLIST=""
a=2
for x in `cat /tmp/modules`;
do
    ############### truncate mountpoint names ############## fred181 mod 231020 for 01-filesystem.squashfs
    #   NAME=`basename $x`; //ORIGINAL line
    if [ "$(basename $x)" = "01-filesystem.squashfs" ]; then  #fred181 mod 231020 keep name 01-filesystem.squashfs
if [ $PFULL ] && [ -d /mnt/$DEV/$LPTH/pfull ]; then
continue
else
NAME=`basename $x`;
fi
	else
        NAME=`basename ${x%.*}`; # remove extension .squashfs
        #NAME="${NAME:0:14}""-$a" # initial OK 
        #NAME="${NAME:0:14}""-$a"".squashfs" fix PROBLEM returned too many filename characters
        NAME="${NAME:0:9}""-$a"".squashfs"
	    # skip if (truncated) /memory/images/$NAME exists already
	    [ -d /memory/images/$NAME ] && continue
	    let a=a+1
 	fi
    #########################################################
	mkdir /memory/images/$NAME;
	mount -o loop $x /memory/images/$NAME 2>/dev/null
	if [ $? -eq 0 ];
	then
		echo " ${m} `basename $x`"
		LOWLIST=/memory/images/${NAME}:${LOWLIST}
	else
		echo "${i}${CYAN}Cannot read $NAME - corrupted module?${RST}"
		rmdir /memory/images/$NAME
	fi
done
if [ -z "$(echo "${LOWLIST}" | grep 01-filesystem.squashfs)" ]; then
mkdir -p "/memory/images/01-filesystem.squashfs"
LOWLIST=/memory/images/01-filesystem.squashfs:${LOWLIST}
fi

if [ -d /memory/images/changes-exit ]
then
	LOWLIST=/memory/images/changes-exit/$UDIR:${LOWLIST}
	cp -a /memory/images/changes-exit/workdir/* $WORKDIR/. 2> /dev/null
fi
LOWLIST=`echo $LOWLIST | sed 's/:$//'`

#echo "mount -t overlay -o upperdir=$UPPERDIR,lowerdir=$LOWLIST,workdir=$WORKDIR overlay /union"
mount -t overlay -o upperdir=$UPPERDIR,lowerdir=$LOWLIST,workdir=$WORKDIR overlay /union
if [ $? -ne 0 ]
then
	sh
fi
}

pos_fail() {
rm -f /memory/changes/._test1 /memory/changes/._test2
umount /memory/changes
echo -e '\n'
echo "${YELLOW}A Windows filesystem (FAT, NTFS) or other non-posix compatible filesystem
has been detected on $CHANGES or $(echo $CHANGES |sed 's|\(.*\)/.*|\1|') .
Your changes cannot be saved directly to the specified storage media with this setup.
Please use the ${CYAN}makepfile${YELLOW} to create a .dat container
and use it for saving your changes after your next reboot.${RST}"
echo "Boot will continue in ${CYAN}Always Fresh${RST} mode for this session"
sleep 10
rmdir /mnt/$DEV/$LPTH/changes
fail_chn
}

pos_fail1() {
rm -f /memory/changes/._test1 /memory/changes/._test2
umount /memory/changes
echo -e '\n'
echo "${YELLOW}A Windows filesystem (FAT, NTFS) or other non-posix compatible filesystem
has been detected on $(echo $CHANGES |sed 's|\(.*\)/.*|\1|').
Your changes cannot be saved directly to the specified storage media with this setup.${RST}"
echo "Press enter to continue in ${CYAN}Always Fresh${RST} mode for this session"
read -s -n1
rmdir /mnt/$DEV/$LPTH/changes 2>/dev/null
fail_chn
}

setup_changes_dir_or_dat() {
if [ $PFULL ] && [ -d /mnt/$DEV/$LPTH/pfull/filesystem/var ] && [ -d /mnt/$DEV/$LPTH/pfull/filesystem/usr ] && [ -d /mnt/$DEV/$LPTH/pfull/filesystem/root ]; then
	mount -o bind /mnt/$DEV/$LPTH/pfull /memory/changes && touch /memory/changes/._test1 2>/dev/null
elif [ $PFULL ]; then pseudo_fatal
elif [ -d /mnt/$DEV/$LPTH ]; then
	mkdir -p /mnt/$DEV/$LPTH/changes 2>/dev/null && \
	mount -o bind /mnt/$DEV/$LPTH/changes /memory/changes && touch /memory/changes/._test1 2>/dev/null
else
	if blkid /mnt/$DEV/$LPTH 2>/dev/null | cut -d" " -f3- | grep -q _LUKS; then
		echo "${i}found LUKS encrypted .dat container - unsupported"
		fail_chn ; return 1
		#for x in dm_crypt cryptd cbc sha256_generic aes_generic aes_x86_64; do modprobe $x 2>/dev/null; done
		#losetup /dev/loop2 /mnt/$DEV/$LPTH
		#echo "${i}found encrypted .dat container"
		#cryptsetup luksOpen /dev/loop2 crypt
		#mount /dev/mapper/crypt /memory/changes 2>/dev/null && touch /memory/changes/._test1 2>/dev/null
	else
		mount -o loop /mnt/$DEV/$LPTH /memory/changes 2>/dev/null && touch /memory/changes/._test1 2>/dev/null
	fi
fi
}

setup_changes() {
echo "${i}testing filesystem on $CHANGES for posix compatibility"
ln -s /memory/changes/._test1 /memory/changes/._test2 2>/dev/null && chmod +x /memory/changes/._test1 2>/dev/null && [ -x /memory/changes/._test1 ] && chmod -x /memory/changes/._test1 2>/dev/null && [ ! -x /memory/changes/._test1 ] && rm -f /memory/changes/._test1 /memory/changes/._test2
ret=$?
[ $ret -ne 0 ] && posfail=yes
if [ $CHNEXIT = +EXIT ]; then
	if [ $PFULL ] && [ ! -d /mnt/$DEV/$LPTH ]; then
		APTH=$(echo /mnt/$DEV/$LPTH |sed 's|\(.*\)/.*|\1|')
		rm -f /memory/changes/._test1 /memory/changes/._test2; umount /memory/changes
		mount -o bind $APTH/pfull /memory/changes && touch /memory/changes/._test1 2>/dev/null
	elif [ -z "$PFULL" ] && [ ! -d /mnt/$DEV/$LPTH ]; then
		APTH=$(echo /mnt/$DEV/$LPTH |sed 's|\(.*\)/.*|\1|')
		rm -f /memory/changes/._test1 /memory/changes/._test2; umount /memory/changes
		mkdir -p $APTH/changes 2>/dev/null && \
		mount -o bind $APTH/changes /memory/changes && touch /memory/changes/._test1 2>/dev/null
	elif [ $PFULL ]; then
		rm -f /memory/changes/._test1 /memory/changes/._test2; umount /memory/changes
		mount -o bind /mnt/$DEV/$LPTH/pfull /memory/changes && touch /memory/changes/._test1 2>/dev/null
	else
		rm -f /memory/changes/._test1 /memory/changes/._test2; umount /memory/changes
		mkdir -p /mnt/$DEV/$LPTH/changes 2>/dev/null && \
		mount -o bind /mnt/$DEV/$LPTH/changes /memory/changes && touch /memory/changes/._test1 2>/dev/null
	fi
	ln -s /memory/changes/._test1 /memory/changes/._test2 2>/dev/null && chmod +x /memory/changes/._test1 2>/dev/null && [ -x /memory/changes/._test1 ] && chmod -x /memory/changes/._test1 2>/dev/null && [ ! -x /memory/changes/._test1 ] && rm -f /memory/changes/._test1 /memory/changes/._test2
fi
ret1=$?
if [ $ret -ne 0 ] && [ "$posfail" = "yes" ]; then pos_fail ; return 0
elif [ $ret1 -ne 0 ] && [ -z "$posfail" ]; then pos_fail1 ; return 0
fi

echo "${i}filesystem is posix compatible"
CHNDEV=/mnt/$DEV

if [ -f /memory/changes/clear-changes-on-reboot ]; then
	echo "${i}${CYAN}changes content signalled to be cleared${RST}"
	rm -rf /memory/changes/*
fi

if [ "$CHNEXIT" = EXIT ] || param changes-ro ; then
	CHNEXIT=$CHNDEV/$LPTH; echo $CHNEXIT >/tmp/changes-exit
	param changes-ro && echo "${i}${CYAN}changes will not be saved for this session${RST}" || echo "${i}${CYAN}changes will be saved only during reboot/shutdown${RST}"
	setClean
	mkdir -p /memory/images/changes-exit
	mount -o move /memory/changes /memory/images/changes-exit
	umount /memory/changes 2>/dev/null;
	mount -t tmpfs -o size=$RAMSIZE tmpfs /memory/changes;
	CHANGES=memory
elif [ $CHNEXIT = +EXIT ]; then
	CHNEXIT=$CHNDEV/$LPTH; echo $CHNEXIT >/tmp/changes-exit
	echo "${i}${CYAN}changes will be saved only during reboot/shutdown${RST}"
	if [ ! -d /mnt/$DEV/$LPTH ]; then
		APTH=$(echo /mnt/$DEV/$LPTH |sed 's|\(.*\)/.*|\1|')
		echo "${i}${CYAN}option +EXIT is being used, changes are NOT written in memory${RST}"
		echo "${i}${CYAN}temporary changes will be in $APTH/tmp-changes ${RST}"
		umount /memory/changes 2>/dev/null
		rmdir $APTH/changes 2>/dev/null
		mount -o loop /mnt/$DEV/$LPTH /memory/changes 2>/dev/null
		setClean
		mkdir -p /memory/images/changes-exit
		mount -o move /memory/changes /memory/images/changes-exit
		rm -rf $APTH/tmp-changes 2> /dev/null
		mkdir -p $APTH/tmp-changes
		mount -o bind $APTH/tmp-changes /memory/changes
	else
		echo "${i}${CYAN}option +EXIT is being used, changes are NOT written in memory${RST}"
		echo "${i}${CYAN}temporary changes will be in /mnt/$DEV/$LPTH/tmp-changes ${RST}"
		setClean
		mkdir -p /memory/images/changes-exit
		mount -o move /memory/changes /memory/images/changes-exit
		umount /memory/changes 2>/dev/null
		rm -rf /mnt/$DEV/$LPTH/tmp-changes 2> /dev/null
		mkdir -p /mnt/$DEV/$LPTH/tmp-changes
		mount -o bind /mnt/$DEV/$LPTH/tmp-changes /memory/changes
	fi
fi
}

fatal() {
echo -e '\n'
echo "${BOLD}/$FOLDER/01-filesystem.squashfs not found!${RST}
You are maybe using an unsupported boot device (eg. RAID SCSI or SAS).
${RED}Make sure UEFI Secure Boot is disabled!${RST}
Workaround: Copy the directory /$FOLDER from your boot device to internal SATA
disk, eg. to ${BOLD}/mnt/sda1/$FOLDER${RST} or ${BOLD}C:\\$FOLDER${RST}. Then try to boot again.
Make sure that your boot parameters (cheatcodes) are correct.

${BOLD}Press ${YELLOW}space/enter ${RST}${BOLD}to unmount all devices and reboot
or ${YELLOW}any other key ${RST}${BOLD}to drop to the debug shell.${RST}"
read -s -n1 ans
if [ "$ans" = "" ]; then
	umount /mnt/* 2>/dev/null
	umount -a 2>/dev/null
	reboot -f
else
echo "${CYAN}Here is debugging shell for you, unmount all partitions
and press Ctrl+Alt+Del when you finish. Good luck!${RST}"
sh
fi
}

pseudo_fatal() {
echo -e '\n'
echo "Data not found for pseudo-full install ${BOLD}/mnt/$DEV/$LPTH/pfull${RST}
${BOLD}Press ${YELLOW}space/enter ${RST}${BOLD}to unmount all devices and reboot
or ${YELLOW}any other key ${RST}${BOLD}to drop to the debug shell.${RST}"
read -s -n1 ans
if [ "$ans" = "" ]; then
	umount /mnt/* 2>/dev/null
	umount -a 2>/dev/null
	reboot -f
else
echo "${CYAN}Here is debugging shell for you, unmount all partitions
and press Ctrl+Alt+Del when you finish. Good luck!${RST}"
sh
fi
}
