#!/bin/bash

# mod-get Download applications and create .squashfs modules
# by gumanzoy https://github.com/PocketHandyBox

if [ "`whoami`" != "root" ]; then
	which gksu > /dev/null && exec gksu ${0} "$@"
	which gsu > /dev/null && exec gsu ${0} "$@"
	echo "This script should be run as root"
	exit 1
fi

export WORKDIR=/tmp/mod-get-$$
export MKSFSCMP="-comp xz -Xbcj x86"
export ARCH=`uname -m`
export APPCONFDIR=/opt/mod-get/${ARCH}
export APPCONFURL="https://github.com/PocketHandyBox/phb-base/raw/main/trixie/rootcopy/opt/mod-get/"

[ `nmcli -g STATE g` = connected ] && export CONNECT=1

fail() {
cd ~ && rm -rf ${WORKDIR}
[ "$GUI" ] && read -s -n 1 -p "Press any key to close . . ."
exit 1
}
export -f fail

fail_summ() {
echo "$FILENAME md5sum don't match"
echo "$MD5SUM"
[ "$GUI" ] && read -s -n 1 -p "Press any key to close . . ."
exit 1
}
export -f fail_summ

geticon_chk() {
if [ "$CONNECT" ]; then echo "Download icon for $APPNAME"
else echo "Unable to download icon for $APPNAME"
  return 1
fi
}
export -f geticon_chk

getconf() {
if ! wget -T 180 "$APPCONFURL""${ARCH}/${APPNAME}.conf"
then [ "$GUI" ] && read -s -n 1 -p "Press any key to close . . ."
fi
}
export -f getconf

updconf() {
mkdir -p /var/opt/mod-get
cd /var/opt/mod-get
[ -f ${APPNAME}.conf ] || xterm +aw -T mod-get -e /bin/bash -c getconf
if [ ! -f ${APPNAME}.conf ]; then
  UPDCONFMSG="\nCheck for ${APPNAME}.conf updates <span color='dark red'>failed</span>"
  return 1
fi
if diff -q ${APPNAME}.conf ${APPCONFDIR}/${APPNAME}.conf ; then
  UPDCONFMSG="\nNo <span color='dark green'>updates</span> found for ${APPNAME}.conf - file don't changed"
else
  APPCONF=${APPCONFDIR}/${APPNAME}.conf ; local VER1=`printval VER`
  APPCONF=${APPNAME}.conf ; local VER2=`printval VER`
  [ "$VER1" != "$VER2" ] && local UPDVER="$VER1 -> $VER2"
  UPDCONFMSG="\nFile ${APPNAME}.conf <span color='dark green'>${UPDVER} updated</span> successfully"
  cp ${APPNAME}.conf ${APPCONFDIR}/${APPNAME}.conf
fi
}

printval() {
grep -m1 ^${1}= $APPCONF | cut -d= -f2 | sed s/\"//g
}

applist() {
ls "$APPCONFDIR"/*.conf | while read APPCONF; do
if [ "$APPNAME" ]; then
  [ `basename $APPCONF .conf` = "$APPNAME" ] && echo TRUE || echo FALSE
else
  [ "$FALSE" ] && echo FALSE || echo TRUE ; local FALSE=1
fi
basename $APPCONF .conf
printval VER
printval SIZE
printval DESCRIPTION
printval LICENSE
done
}

show_applist() {
[ "$CONNECT" ] && DOWNLOADBTN="--button=Check-update!system-software-update:4 --button=Download!emblem-downloads:2"

while true; do
  APPNAME=`applist | yad --title=mod-get --window-icon=emblem-downloads --width=650 --height=350 \
   --text="<b>mod-get</b>\nDownload applications and create .squashfs modules $UPDCONFMSG" \
   --image=emblem-package --list --radiolist --listen --no-selection --print-column=2 \
   --column=# --column=App --column=Version --column=Size --column=Description --column=License \
   --button=Quit\!gtk-quit:1 --button='Offline (select file)'\!emblem-package:0 $DOWNLOADBTN`
  ret=$?
  [ "$ret" = 1 -o "$ret" = 252 ] && break
  export APPNAME=`echo $APPNAME | cut -d'|' -f1`
  [ "$ret" = 4 ] && updconf
  [ "$ret" = 2 ] && show_eulaurl
  [ "$ret" = 0 -o "$ret" = 2 ] && break
done
[ "$ret" = 1 -o "$ret" = 252 ] && exit
[ "$ret" = 0 ] && export OFFLINE=1
}

show_eulaurl() {
APPCONF=${APPCONFDIR}/${APPNAME}.conf ; local EULAURL="`printval EULAURL`"
[ -z "$EULAURL" ] && return 0
yad --title="mod-get - $APPNAME EULA" --window-icon=emblem-downloads --image=dialog-information --height=160 --borders=8 \
 --text="<b>$APPNAME</b> Software\nEnd User License Agreement\nPress Accept to continue or press Cancel\n" \
 --fixed --form --field="$EULAURL:LINK" "$EULAURL" --button=Cancel\!gtk-cancel:1 --button=Accept\!gtk-ok:2 > /dev/null
ret=$?
}

show_eulatxt() {
[ -f "$EULATXT" ] || return 0
yad --title="mod-get - $APPNAME EULA" --window-icon=emblem-downloads --center --width=600 --height=500 --no-escape \
 --text="<b>$APPNAME</b> Software End User License Agreement\n<tt>$EULATXT</tt>\nPress Accept to continue or press Cancel" \
 --text-info --show-uri --filename="$EULATXT" --button=Cancel\!gtk-cancel:1 --button=Accept\!gtk-ok:0
[ "$?" = 0 ] && return 0
cd ~ && rm -rf ${WORKDIR}
exit 1
}
export -f show_eulatxt

create_module() {
. "$1"
APPNAME=`basename "$1" .conf`

if [ "$OFFLINE" ]; then
  FILENAME=`yad --title=mod-get --window-icon=emblem-downloads --width=700 --height=500 \
   --image=emblem-package --text="Please select\n<b>$FILENAME</b>" --file --file-filter="$FILENAME | $FILENAME"`
  [ "$?" = 1 -o "$?" = 252 ] && exit
  [ -f "$FILENAME" ] || exit
  md5sum "$FILENAME" | grep -q "$MD5SUM" || fail_summ
else
  mkdir -p ${WORKDIR}
  cd ${WORKDIR}
  wget "$LINK"
  md5sum "$FILENAME" | grep -q "$MD5SUM" || fail_summ
  FILENAME="$WORKDIR"/"$FILENAME"
fi

mkdir -p ${WORKDIR}/${APPNAME}
cd ${WORKDIR}/${APPNAME}
unpack
cd ${WORKDIR}

if [ "$GUI" ]; then
  [ `uname -m` = i686 ] && I686=32
  while [ -z "$TARGETDIR" ]; do
  TARGETDIR=`yad --title=mod-get --window-icon=emblem-downloads --image=emblem-package --width=700 --height=500 \
   --text="Please select folder to save ${APPNAME}-${VER}.squashfs module.\nSave to <b>phb/modules${I686}</b> folder on USB flash-drive to auto load on boot." \
   --file --filename="/mnt/home/" --directory --save --button="Skip (use /tmp)":1 --button=Select\!gtk-ok:0`
  [ "$?" = 1 -o "$?" = 252 ] && break
  done
fi

[ -d "$TARGETDIR" ] || TARGETDIR=/tmp
[ -f "$TARGETDIR"/${APPNAME}-${VER}.squashfs ] && rm -f "$TARGETDIR"/${APPNAME}-${VER}.squashfs
mksquashfs ${APPNAME} "$TARGETDIR"/${APPNAME}-${VER}.squashfs -b 1M $MKSFSCMP || fail

if [ "$GUI" ]; then
  yad --title=mod-get --window-icon=emblem-package --image=dialog-question --fixed \
   --text="Copy installed <b>${APPNAME}-${VER}</b> files to current session?\nPossible to run it without reboot." \
   --button=Skip\!gtk-clear:1 --button=OK\!gtk-ok:0
  ret=$?
fi

if [ "$ret" = 0 ]; then
  mv -f ${APPNAME}/opt/${APPNAME} /opt/ 2> /dev/null
  cp -r ${APPNAME}/* /
  RANDOMFILE=$RANDOM
  touch /usr/share/applications/$RANDOMFILE.desktop && rm -f /usr/share/applications/$RANDOMFILE.desktop
fi

cd ~ && rm -rf ${WORKDIR}

echo -e "\e[1mModule saved to \e[33m${TARGETDIR}/${APPNAME}-${VER}.squashfs\e[0m"
[ "$GUI" ] && read -s -n 1 -p "Press any key to close . . ."
}
export -f create_module

if [ "$1" = "-gui" ]; then
  export GUI=1
  show_applist
  xterm +aw -T mod-get -e /bin/bash -c "create_module ${APPCONFDIR}/${APPNAME}.conf"
elif [ -f "$1" ]; then
  . "$1"
  [ "$VER" ] || exit
  create_module "$1"
else
  echo "mod-get Download applications and create .squashfs modules"
  echo -e "\nUsage:"
  echo "-gui Show applications list (YAD GUI)"
  echo -e "[app].conf\n"
  find "$APPCONFDIR"/*.conf
fi
